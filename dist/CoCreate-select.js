/*! For license information please see CoCreate-select.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.select=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const actionName = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[actionName];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    } else {\n      let status = this.__runSpecialAction(actionName, data);\n\n      if (status === \"next\") {\n        this.__moveNextAction();\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.__moveNextAction(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {// CoCreate.logic.setLinkProcess(aTag)\n    }\n  },\n  //. special action\n  __runSpecialAction: function (actionName, data) {\n    let matches = /(\\w+)\\{([a-zA-Z0-9_ \\-#$.]+)\\}/gm.exec(actionName);\n\n    if (!matches || matches.length < 3) {\n      return \"next\";\n    }\n\n    let type = matches[1],\n        param = matches[2].trim();\n    if (!param) return \"next\";\n    const self = this;\n\n    switch (type) {\n      case 'event':\n        console.log(\"Waiting Event....\");\n        document.addEventListener(param, eventData => {\n          console.log('Event Action (Received event from other section) ====== ' + param);\n\n          self.__moveNextAction(eventData);\n        }, {\n          once: true\n        });\n        break;\n\n      case 'timeout':\n        let delayTime = parseInt(param);\n\n        if (delayTime > 0) {\n          setTimeout(function () {\n            console.log(\"Timeout ======= \" + param);\n\n            self.__moveNextAction(data);\n          }, parseInt(param));\n        }\n\n        break;\n\n      case 'action':\n        let btn = document.querySelector(param);\n\n        if (btn) {\n          btn.click();\n        }\n\n        break;\n\n      default:\n        return \"next\";\n    }\n  },\n  __moveNextAction: function (data) {\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-action/src/index.js\n")},"../CoCreate-crud-client/src/crud.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// import {getCommonParams, getCommonParamsExtend, generateSocketClient} from \"@cocreate/socket-client/src/common-fun.js\"\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @cocreate/socket-client/src/common-fun.js */ \"../CoCreate-socket-client/src/common-fun.js\"), __webpack_require__(/*! ./utils.crud.js */ \"../CoCreate-crud-client/src/utils.crud.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (commonFunc, utilsCrud) {\n      return factory(window, commonFunc, utilsCrud);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function (wnd, commonFunc, utilsCrud) {\n  const CoCreateCRUD = {\n    socket: null,\n    setSocket: function (socket) {\n      this.socket = socket;\n    },\n\n    readDocumentList(info) {\n      if (!info) return;\n      let request_data = commonFunc.getCommonParams();\n\n      if (!info.collection || !info.operator) {\n        return;\n      }\n\n      request_data = { ...request_data,\n        ...info\n      };\n      this.socket.send('readDocumentList', request_data);\n    },\n\n    createDocument: function (info) {\n      if (info === null) {\n        return;\n      }\n\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = { ...info,\n        ...commonData\n      };\n      let data = info.data || {};\n\n      if (!data['organization_id']) {\n        data['organization_id'] = wnd.config.organization_Id;\n      }\n\n      if (info['data']) {\n        data = { ...data,\n          ...info['data']\n        };\n      } //. rebuild data\n\n\n      request_data['data'] = data;\n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('createDocument', request_data, room);\n    },\n    updateDocument: function (info) {\n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) return;\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = { ...info,\n        ...commonData\n      };\n\n      if (typeof info['data'] === 'object') {\n        request_data['set'] = info['data'];\n      }\n\n      if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n      if (!request_data['set'] && !request_data['unset']) return;\n\n      if (info.broadcast === false) {\n        request_data['broadcast'] = false;\n      }\n      /** socket parameters **/\n\n\n      if (info['broadcast_sender'] === undefined) {\n        request_data['broadcast_sender'] = true;\n      }\n\n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('updateDocument', request_data, room);\n    },\n    readDocument: function (info) {\n      if (info === null) {\n        return;\n      }\n\n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) {\n        return;\n      }\n\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = { ...info,\n        ...commonData\n      };\n      console.log(request_data);\n      this.socket.send('readDocument', request_data);\n    },\n    deleteDocument: function (info) {\n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) {\n        return;\n      }\n\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = { ...info,\n        ...commonData\n      };\n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('deleteDocument', request_data, room);\n    },\n\n    /** export / import db functions **/\n    exportCollection: function (info) {\n      if (info === null) return;\n      let request_data = commonFunc.getCommonParamsExtend(info);\n      request_data['collection'] = info['collection'];\n      request_data['export_type'] = info['export_type'];\n      request_data['metadata'] = info['metadata'];\n      this.socket.send('exportDB', request_data);\n    },\n    importCollection: function (info) {\n      const {\n        file\n      } = info;\n      if (info === null || !(file instanceof wnd.File)) return;\n      const extension = file.name.split(\".\").pop();\n      if (!['json', 'csv'].some(item => item === extension)) return;\n      let request_data = commonFunc.getCommonParamsExtend(info);\n      request_data['collection'] = info['collection'];\n      request_data['import_type'] = extension;\n      this.socket.send('importDB', request_data);\n      this.socket.sendFile(file);\n    },\n    listen: function (message, fun) {\n      this.socket.listen(message, fun);\n    },\n    listenAsync: function (eventname) {\n      return this.socket.listenAsync(eventname);\n    },\n    createSocket: function (host, namespace) {\n      if (namespace) {\n        this.socket.create({\n          namespace: namespace,\n          room: null,\n          host: host\n        });\n        this.socket.setGlobalScope(namespace);\n      } else {\n        this.socket.create({\n          namespace: null,\n          room: null,\n          host: host\n        });\n      }\n    },\n    ...utilsCrud\n  };\n  return CoCreateCRUD;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-crud-client/src/crud.js\n")},"../CoCreate-crud-client/src/index.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @cocreate/socket-client */ \"../CoCreate-socket-client/src/index.js\"), __webpack_require__(/*! @cocreate/crud-client/src/crud.js */ \"../CoCreate-crud-client/src/crud.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (CoCreateSocket, CoCreateCRUD) {\n      return factory(true, CoCreateSocket, CoCreateCRUD);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function (isBrowser, CoCreateSocket, CoCreateCRUD) {\n  if (isBrowser) {\n    let crud_socket = new CoCreateSocket('ws');\n    CoCreateCRUD.setSocket(crud_socket);\n    CoCreateCRUD.createSocket(window.config.host ? window.config.host : window.location.hostname, window.config.organization_Id);\n  }\n\n  return CoCreateCRUD;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZWxlY3QvLi4vQ29DcmVhdGUtY3J1ZC1jbGllbnQvc3JjL2luZGV4LmpzPzBjOWQiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJDb0NyZWF0ZVNvY2tldCIsIkNvQ3JlYXRlQ1JVRCIsInNlbGYiLCJpc0Jyb3dzZXIiLCJjcnVkX3NvY2tldCIsInNldFNvY2tldCIsImNyZWF0ZVNvY2tldCIsIndpbmRvdyIsImNvbmZpZyIsImhvc3QiLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwib3JnYW5pemF0aW9uX0lkIl0sIm1hcHBpbmdzIjoiOztBQUFDLFdBQVVBLElBQVYsRUFBZ0JDLE9BQWhCLEVBQXlCO0FBQ3RCLE1BQUksSUFBSixFQUFnRDtBQUM1Q0MscUNBQU8sQ0FBQyw0RkFBRCxFQUE0QixtR0FBNUIsQ0FBRCxtQ0FBbUUsVUFBU0MsY0FBVCxFQUF5QkMsWUFBekIsRUFBdUM7QUFDL0csYUFBT0gsT0FBTyxDQUFDLElBQUQsRUFBT0UsY0FBUCxFQUF1QkMsWUFBdkIsQ0FBZDtBQUNBLEtBRks7QUFBQSxrR0FBTjtBQUdILEdBSkQsTUFJTyxFQVVSO0FBQ0YsQ0FoQkEsRUFnQkMsT0FBT0MsSUFBUCxLQUFnQixXQUFoQixHQUE4QkEsSUFBOUIsU0FoQkQsRUFnQjRDLFVBQVVDLFNBQVYsRUFBcUJILGNBQXJCLEVBQXFDQyxZQUFyQyxFQUFtRDtBQUM5RixNQUFJRSxTQUFKLEVBQWU7QUFDYixRQUFJQyxXQUFXLEdBQUcsSUFBSUosY0FBSixDQUFtQixJQUFuQixDQUFsQjtBQUNBQyxnQkFBWSxDQUFDSSxTQUFiLENBQXVCRCxXQUF2QjtBQUNBSCxnQkFBWSxDQUFDSyxZQUFiLENBQTBCQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBZCxHQUFxQkYsTUFBTSxDQUFDQyxNQUFQLENBQWNDLElBQW5DLEdBQTBDRixNQUFNLENBQUNHLFFBQVAsQ0FBZ0JDLFFBQXBGLEVBQThGSixNQUFNLENBQUNDLE1BQVAsQ0FBY0ksZUFBNUc7QUFDRDs7QUFDRCxTQUFPWCxZQUFQO0FBQ0QsQ0F2QkEsQ0FBRCIsImZpbGUiOiIuLi9Db0NyZWF0ZS1jcnVkLWNsaWVudC9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbXCJAY29jcmVhdGUvc29ja2V0LWNsaWVudFwiLCBcIkBjb2NyZWF0ZS9jcnVkLWNsaWVudC9zcmMvY3J1ZC5qc1wiXSwgZnVuY3Rpb24oQ29DcmVhdGVTb2NrZXQsIENvQ3JlYXRlQ1JVRCkge1xuICAgICAgICBcdHJldHVybiBmYWN0b3J5KHRydWUsIENvQ3JlYXRlU29ja2V0LCBDb0NyZWF0ZUNSVUQpXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGxldCB3bmQgPSB7XG4gICAgICAgIGNvbmZpZzoge30sXG4gICAgICAgIEZpbGU6IHt9XG4gICAgICB9XG4gICAgICBjb25zdCBDb0NyZWF0ZUNSVUQgPSByZXF1aXJlKFwiQGNvY3JlYXRlL2NydWQtY2xpZW50L3NyYy9jcnVkLmpzXCIpXG4gICAgICBjb25zdCBDb0NyZWF0ZVNvY2tldCA9IHJlcXVpcmUoXCJAY29jcmVhdGUvc29ja2V0LWNsaWVudFwiKVxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KGZhbHNlLCBDb0NyZWF0ZVNvY2tldCwgQ29DcmVhdGVDUlVEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290LnJldHVybkV4cG9ydHMgPSBmYWN0b3J5KHRydWUsIHJvb3RbXCJAY29jcmVhdGUvc29ja2V0LWNsaWVudFwiXSwgcm9vdFtcIkBjb2NyZWF0ZS9jcnVkLWNsaWVudC9zcmMvY3J1ZC5qc1wiXSk7XG4gIH1cbn0odHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uIChpc0Jyb3dzZXIsIENvQ3JlYXRlU29ja2V0LCBDb0NyZWF0ZUNSVUQpIHtcbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIGxldCBjcnVkX3NvY2tldCA9IG5ldyBDb0NyZWF0ZVNvY2tldCgnd3MnKTtcbiAgICBDb0NyZWF0ZUNSVUQuc2V0U29ja2V0KGNydWRfc29ja2V0KTtcbiAgICBDb0NyZWF0ZUNSVUQuY3JlYXRlU29ja2V0KHdpbmRvdy5jb25maWcuaG9zdCA/IHdpbmRvdy5jb25maWcuaG9zdCA6IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSwgd2luZG93LmNvbmZpZy5vcmdhbml6YXRpb25fSWQpXG4gIH0gXG4gIHJldHVybiBDb0NyZWF0ZUNSVUQ7XG59KSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-crud-client/src/index.js\n")},"../CoCreate-crud-client/src/utils.crud.js":(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory();\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function () {\n  function __mergeObject(target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], __mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  }\n\n  function __createObject(data, path) {\n    if (!path) return data;\n    let keys = path.split('.');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  }\n\n  function __createArray(key, data) {\n    try {\n      let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key);\n\n      if (item && item.length == 3) {\n        let arrayKey = item[1];\n        let index = parseInt(item[2]);\n\n        if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n          data[arrayKey] = [];\n        }\n\n        data[arrayKey][index] = data[key];\n        delete data[key];\n        key = arrayKey;\n      }\n    } catch {\n      console.log('create array error');\n    }\n\n    return key;\n  }\n\n  function isObject(item) {\n    return !!item && item.constructor === Object;\n  }\n\n  function isArray(item) {\n    return !!item && item.constructor === Array;\n  }\n\n  function decodeObject(data) {\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      k = __createArray(k, data);\n\n      if (k.split('.').length > 1) {\n        let newData = __createObject(data[k], k);\n\n        delete data[k];\n        objectData = __mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  }\n\n  function encodeObject(data) {\n    let keys = Object.keys(data);\n    let newData = {};\n    keys.forEach(k => {\n      let data_value = data[k];\n\n      if (isObject(data[k])) {\n        let new_obj = encodeObject(data[k]);\n        let newKeys = Object.keys(new_obj);\n        newKeys.forEach(newKey => {\n          let value = new_obj[newKey];\n          newKey = k + \".\" + newKey;\n          newData[newKey] = value;\n        });\n      } else if (isArray(data_value)) {\n        data_value.forEach((v, index) => {\n          newData[`${k}[${index}]`] = v;\n        });\n      } else {\n        newData[k] = data[k];\n      }\n    });\n    return newData;\n  }\n\n  function getAttr(el) {\n    if (!el) return;\n    let collection = el.getAttribute('data-collection');\n    let document_id = el.getAttribute('data-document_id');\n    let name = el.getAttribute('name');\n    return {\n      collection,\n      document_id,\n      name\n    };\n  }\n\n  function getFlagAttr(el) {\n    if (!el) return {};\n    let is_realtime = isRealtimeAttr(el);\n    let is_save = isSaveAttr(el);\n    let is_read = isReadAttr(el);\n    let is_update = isUpdateAttr(el);\n    return {\n      is_realtime,\n      is_save,\n      is_read,\n      is_update\n    };\n  }\n\n  const isReadAttr = el => __isValueOfAttr(el, 'data-read_value');\n\n  const isSaveAttr = el => __isValueOfAttr(el, 'data-save_value');\n\n  const isUpdateAttr = el => __isValueOfAttr(el, 'data-update_value'); // const isRealtimeAttr = (el) => ( __isValueOfAttr(el, 'data-realtime'));\n\n\n  const isRealtimeAttr = el => {\n    if (!el) return false;\n    let flag = el.getAttribute('data-realtime') == \"false\" ? false : true;\n    return flag;\n  };\n\n  function __isValueOfAttr(el, attr) {\n    if (!el) return false;\n    let flag = el.getAttribute(attr) === \"false\" ? false : true;\n    return flag;\n  }\n\n  function checkValue(value) {\n    if (!value) return false;\n\n    if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function isJsonString(str_data) {\n    try {\n      let json_data = JSON.parse(str_data);\n\n      if (typeof json_data === \"object\" && json_data != null) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function isCRDT(input) {\n    const {\n      collection,\n      document_id,\n      name\n    } = getAttr(input);\n    if (isJsonString(collection)) return false;\n    if (isJsonString(name)) return false;\n\n    if (input.tagName === \"INPUT\" && [\"text\", \"email\", \"tel\", \"url\"].includes(input.type) || input.tagName === \"TEXTAREA\") {\n      if (!name) return false;\n      if (!isRealtimeAttr(input)) return false;\n      if (input.getAttribute(\"data-unique\") === \"true\") return false;\n      if (input.type === 'password') return false;\n      if (!isReadAttr(input)) return false;\n      return true;\n    }\n\n    return false;\n  }\n\n  function checkDocumentId(document_id) {\n    try {\n      if (!document_id) return false;\n      if (document_id.toLowerCase() === \"null\") return false;\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  return {\n    decodeObject,\n    encodeObject,\n    getAttr,\n    getFlagAttr,\n    isRealtimeAttr,\n    isReadAttr,\n    isSaveAttr,\n    isUpdateAttr,\n    checkValue,\n    isCRDT,\n    checkDocumentId\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-crud-client/src/utils.crud.js\n")},"../CoCreate-form/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ \"../CoCreate-action/src/index.js\"));\n\nvar _utils2 = _interopRequireDefault(__webpack_require__(/*! ./utils */ \"../CoCreate-form/src/utils.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateForm = {\n  requestAttr: \"data-document_request\",\n  selectors: [],\n  modules: [],\n  init: function ({\n    name,\n    selector,\n    callback\n  }) {\n    this.modules.push({\n      name,\n      selector,\n      callback\n    });\n\n    if (selector) {\n      this.selectors.push(selector);\n    }\n  },\n  get: function () {\n    return {\n      selectors: this.selectors\n    };\n  },\n  checkID: function (element, attr = \"data-document_id\") {\n    let document_id = element.getAttribute(attr) || \"\";\n\n    if (document_id === \"\" || document_id === \"pending\" || !_utils.default.checkValue(document_id)) {\n      return false;\n    }\n\n    return true;\n  },\n  request: function ({\n    form,\n    element,\n    nameAttr,\n    value\n  }) {\n    if (!form && element) {\n      form = element.closest('form');\n    }\n\n    if (form) {\n      this.__requestDocumentIdOfForm(form);\n    } else if (element) {\n      nameAttr = nameAttr || \"name\";\n\n      this.__requestDocumentId(element, nameAttr, value);\n    }\n  },\n  initElement: function (container) {\n    const __container = container || document;\n\n    if (!__container.querySelectorAll) {\n      return;\n    }\n\n    let forms = __container.querySelectorAll('form');\n\n    if (forms.length === 0 && __container != document && __container.tagName === \"FORM\") {\n      forms = [__container];\n    }\n\n    forms.forEach(form => {\n      _utils2.default.setAttribute(form);\n\n      _utils2.default.disableAutoFill(form);\n    });\n  },\n  __init: function () {\n    const forms = document.querySelectorAll('form');\n\n    this.__initEvent();\n\n    forms.forEach(form => {\n      _utils2.default.setAttribute(form);\n    });\n  },\n  __initEvent: function () {\n    const self = this;\n\n    _crudClient.default.listen('createDocument', function (data) {\n      const {\n        metadata\n      } = data;\n\n      self.__receivedDocumentId(data);\n\n      if (metadata == \"createDocument-action\") {//. dispatch EndAction\n      }\n    });\n\n    _crudClient.default.listen('deleteDocument', function (data) {\n      const {\n        metadata\n      } = data;\n\n      if (metadata === \"deleteDocument-action\") {//.dispatch End Action\n      }\n    });\n\n    document.addEventListener('clicked-submitBtn', function (event) {\n      const {\n        element\n      } = event.detail;\n      self.modules.forEach(({\n        selector,\n        callback\n      }) => {\n        if (callback && element.matches(selector)) {\n          callback.call(null, element);\n        }\n      });\n    });\n  },\n  __deleteDocumentAction: function (btn) {\n    const {\n      collection,\n      document_id\n    } = _crudClient.default.getAttr(btn);\n\n    if (_utils.default.checkValue(collection) && _utils.default.checkValue(document_id)) {\n      _crudClient.default.deleteDocument({\n        collection,\n        document_id,\n        'metadata': 'deleteDocument-action'\n      });\n\n      document.dispatchEvent(new CustomEvent('deletedDocument', {\n        detail: {}\n      }));\n    }\n  },\n  __deleteDocumentsAction: function (btn) {\n    const {\n      collection,\n      document_id\n    } = _crudClient.default.getAttr(btn);\n\n    const selector = btn.getAttribute('data-document_target');\n    if (!selector) return;\n    const selectedEls = document.querySelectorAll(selector);\n\n    if (_utils2.default.checkValue(collection)) {\n      selectedEls.forEach(el => {\n        const document_id = el.getAttribute('data-document_id');\n\n        if (_crudClient.default.checkValue(document_id)) {\n          _crudClient.default.deleteDocument({\n            'collection': collection,\n            'document_id': document_id,\n            'metadata': ''\n          });\n        }\n      });\n      document.dispatchEvent(new CustomEvent('deletedDocuments', {\n        detail: {}\n      }));\n    }\n  },\n  __createDocumentAction: function (btn) {\n    const form = btn.closest(\"form\");\n    const self = this;\n\n    let collections = _utils2.default.getCOllections(form);\n\n    collections.forEach(collection => {\n      let data = _utils2.default.getFormData(form, \"\", collection);\n\n      if (Object.keys(data).length == 0 && data.constructor === Object) {\n        return;\n      }\n\n      if (_utils.default.checkValue(collection)) {\n        _crudClient.default.createDocument({\n          'collection': collection,\n          'data': data,\n          'metadata': 'createDocument-action',\n          'element': 'empty'\n        });\n\n        document.dispatchEvent(new CustomEvent('createdDocument', {\n          detail: {}\n        }));\n      }\n    });\n  },\n  __saveDocumentAction: function (btn) {\n    const form = btn.closest(\"form\");\n\n    if (!_utils2.default.checkFormValidate(form)) {\n      alert('Values are not unique');\n      return;\n    }\n\n    const selectors = this.selectors || [];\n    const elements = form.querySelectorAll(selectors.join(','));\n    let request_document_id = false;\n\n    for (var i = 0; i < elements.length; i++) {\n      let el = elements[i];\n\n      const {\n        document_id,\n        name\n      } = _crudClient.default.getAttr(el);\n\n      const is_save = _crudClient.default.isSaveAttr(el);\n\n      if (!is_save) continue;\n\n      if (!_crudClient.default.checkValue(document_id)) {\n        if (name) request_document_id = true;\n        continue;\n      }\n\n      if (_crudClient.default.isCRDT(el)) continue;\n      if (_utils2.default.isTemplateInput(el)) return;\n      var new_event = new CustomEvent(\"clicked-submitBtn\", {\n        bubbles: true,\n        detail: {\n          type: \"submitBtn\",\n          element: el\n        }\n      });\n      el.dispatchEvent(new_event);\n    }\n\n    if (request_document_id) {\n      this.requestDocumentIdOfForm(form);\n    }\n\n    document.dispatchEvent(new CustomEvent('savedDocument', {\n      detail: {}\n    }));\n  },\n  __requestDocumentId: function (element, nameAttr = \"name\", value = null) {\n    const {\n      collection,\n      name\n    } = _crudClient.default.getAttr(element);\n\n    if (!collection || !name) return;\n\n    const request_id = _utils.default.generateUUID();\n\n    element.setAttribute(this.requestAttr, request_id);\n\n    _crudClient.default.createDocument({\n      \"collection\": collection,\n      \"element\": request_id,\n      \"metadata\": \"\"\n    });\n  },\n  __requestDocumentIdOfForm: function (form) {\n    let self = this;\n    let elemens = form.querySelectorAll('[name], [data-pass_to]');\n    let collections = [];\n\n    for (var i = 0; i < elemens.length; i++) {\n      let el = elemens[i];\n\n      if (el.parentNode.classList.contains('template')) {\n        continue;\n      }\n\n      const collection = el.getAttribute(\"data-collection\") || el.getAttribute(\"data-pass_collection\") || \"\";\n\n      if (collection !== \"\" && !collections.includes(collection) && !self.checkID(el, 'data-document_id') && !self.checkID(el, 'data-pass_document_id')) {\n        const request_id = _utils.default.generateUUID();\n\n        collections.push(collection);\n        el.setAttribute(this.requestAttr, request_id); //. get Data\n\n        let data = _utils2.default.getFormData(form, \"\", collection);\n        /* FixME Create Document request */\n\n\n        _crudClient.default.createDocument({\n          \"collection\": collection,\n          \"element\": request_id,\n          'data': data,\n          \"metadata\": \"\"\n        });\n      }\n    }\n  },\n  __setNewIdProcess: function (element, document_id, pass) {\n    if (!element) return;\n    element.removeAttribute(this.requestAttr);\n    const event_data = {\n      document_id: document_id\n    };\n\n    if (!pass && !this.checkID(element) && element.hasAttribute('name')) {\n      element.setAttribute('data-document_id', document_id);\n    }\n\n    if (pass && !this.checkID(element, 'data-pass_document_id') && element.hasAttribute('data-pass_to')) {\n      element.setAttribute('data-pass_document_id', document_id); // CoCreateLogic.storePassData(element)\n\n      if (element.parentNode.classList.contains('submitBtn')) {\n        element.click();\n      }\n    }\n\n    var event = new CustomEvent('set-document_id', {\n      detail: event_data\n    });\n    element.dispatchEvent(event);\n  },\n  __receivedDocumentId: function (data) {\n    if (!data['document_id']) {\n      return;\n    }\n\n    let element = document.querySelector(`[${this.requestAttr}=\"${data['element']}\"]`);\n    if (!element) return;\n    let self = this;\n    const form = element.tagName === \"FORM\" ? element : _utils2.default.getParents(element, 'form');\n    const collection = data['collection'];\n    const id = data['document_id'];\n\n    if (form && id) {\n      form.setAttribute('data-form_id', data['element']);\n      const elements = form.querySelectorAll(`[data-collection=${collection}], [data-pass_collection=${collection}]`);\n      elements.forEach(function (el) {\n        el.removeAttribute(self.requestAttr);\n        if (el.hasAttribute('name')) self.__setNewIdProcess(el, id);\n        if (el.hasAttribute('data-pass_to')) self.__setNewIdProcess(el, id, true);\n      });\n    } else if (element) {\n      this.__setNewIdProcess(element, id);\n    }\n  }\n};\n\nCoCreateForm.__init(); // core.registerInit(CoCreateForm.initElement, CoCreateForm);\n\n\n_observer.default.init({\n  name: 'CoCreateForm',\n  observe: ['subtree', 'childList'],\n  include: 'form',\n  callback: function (mutation) {\n    CoCreateForm.initElement(mutation.target);\n  }\n});\n\n_action.default.init({\n  action: \"createDocument\",\n  endEvent: \"createdDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__createDocumentAction(btn);\n  }\n});\n\n_action.default.init({\n  action: \"deleteDocument\",\n  endEvent: \"deletedDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__deleteDocumentAction(btn);\n  }\n});\n\n_action.default.init({\n  action: \"deleteDocuments\",\n  endEvent: \"deletedDocuments\",\n  callback: (btn, data) => {\n    CoCreateDocument.__deleteDocumentsAction(btn);\n  }\n});\n\n_action.default.init({\n  action: \"saveDocument\",\n  endEvent: \"savedDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__saveDocumentAction(btn);\n  }\n});\n\nvar _default = CoCreateForm;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-form/src/index.js\n")},"../CoCreate-form/src/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst Utils = {\n  disableAutoFill: function (element) {\n    if (element.tagName == \"TEXTAREA\") {\n      element.value = \"\";\n      element.setAttribute(\"autocomplete\", \"off\");\n    }\n\n    if (!element.hasAttribute(\"autocomplete\")) {\n      element.setAttribute('autocomplete', \"off\");\n    }\n  },\n  setAttribute: function (form) {\n    const {\n      collection,\n      document_id,\n      name\n    } = _crudClient.default.getAttr(form);\n\n    const dataRealTime = form.getAttribute('data-realtime');\n    let elements = form.querySelectorAll('[name], [data-pass_to]');\n    elements.forEach(function (el) {\n      if (el.parentNode.classList.contains('template')) {\n        return;\n      }\n\n      if (el.getAttribute('data-realtime') == null && dataRealTime) {\n        // if (!['INPUT', 'TEXTAREA'].indexOf(el.tagName)) {\n        el.setAttribute('data-realtime', dataRealTime); // }\n      }\n\n      if (el.getAttribute('name') && !el.hasAttribute('data-collection') && collection) {\n        el.setAttribute('data-collection', collection);\n      }\n\n      if (el.getAttribute('data-pass_to') && !el.hasAttribute('data-pass_collection') && collection) {\n        el.setAttribute('data-pass_collection', collection);\n      }\n\n      if (el.getAttribute('name') && !el.getAttribute('data-document_id') && document_id) {\n        el.setAttribute('data-document_id', document_id);\n      }\n\n      if (!el.hasAttribute(\"data-document_id\") && document_id != null) {\n        el.setAttribute('data-document_id', document_id);\n      }\n    });\n  },\n  checkFormValidate: function (form) {\n    if (typeof CoCreate.unique !== 'undefined') {\n      return CoCreate.unique.checkValidate(form);\n    }\n\n    return true;\n  },\n  isTemplateInput: function (input) {\n    if (input.classList.contains('template')) return true;\n    let node = input.parentNode;\n\n    while (node) {\n      if (node.classList && node.classList.contains('template')) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  },\n  getFormData: function (form, document_id, collection) {\n    let data = {};\n    if (!collection) return {};\n    const elements = form.querySelectorAll(`[name][data-collection='${collection}']`);\n    elements.forEach(el => {\n      let el_document_id = el.getAttribute('data-document_id') || \"\";\n      let name = el.getAttribute('name');\n      let value = el.value || el.getAttribute('value');\n      if (name === \"_id\") return;\n      if (!name || !value) return;\n\n      if (document_id == el_document_id) {\n        data[name] = el.value;\n      }\n    });\n    return data;\n  },\n  // getFormData: function(form, selectors) {\n  // \tconst self = this; \n  // \tconst elements = form.querySelectorAll(selectors.join(','));\n  // \tlet request_document_id = false;\n  // \tlet dataList = [];\n  // \telements.forEach(el => {\n  // \t\tlet collection = el.getAttribute('data-collection')\n  // \t\tlet document_id = el.getAttribute('data-document_id')\n  // \t\tlet name = el.getAttribute('name')\n  // \t\tif (el.getAttribute('data-save_value') == 'false') {\n  // \t\t\treturn;\n  // \t\t}\n  // \t\tif (!document_id && name) {\n  // \t\t\trequest_document_id = true;\n  // \t\t\treturn;\n  // \t\t}\n  // \t\tlet data = dataList.find(d => d.collection == collection && d.document_id == document_id);\n  // \t})\n  // },\n  getParents: function (element, selector = \"form\") {\n    if (!Element.prototype.matches) {\n      Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length;\n\n        while (--i >= 0 && matches.item(i) !== this) {}\n\n        return i > -1;\n      };\n    }\n\n    for (; element && element !== document; element = element.parentNode) {\n      if (element.matches(selector)) return element;\n    }\n\n    return null;\n  },\n  setDocumentIDOfElement: function (element, document_id) {\n    let old_document_id = element.getAttribute('data-document_id');\n\n    if (!old_document_id || old_document_id == \"\" || old_document_id == \"pending\") {\n      element.setAttribute('data-document_id', document_id);\n    }\n  },\n  getCOllections: function (form) {\n    let collections = [];\n    if (!form) return collections;\n    let els = form.querySelectorAll('[name][data-collection]');\n    els.forEach(el => {\n      let tmpCollection = el.getAttribute('data-collection');\n\n      if (tmpCollection && !collections.includes(tmpCollection)) {\n        collections.push(tmpCollection);\n      }\n    });\n    return collections;\n  }\n};\nvar _default = Utils;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-form/src/utils.js\n")},"../CoCreate-observer/src/index.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n// window.addEventListener("load", () => {\n\n/*\nCoCreate.observer.init({ \n\tname: \'CoCreateFetchInit\', // no usage, just to provide for console debugging \n\tobserve: [\'subtree\', \'childList\',\'attributes\'], // the same parameters of options in #https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe\n\tattributes: [\'data-fetch_collection\'], // it doesn\'t count added nodes or remove nodes\n\tinclude: ".classname", // a selector to select only elements that matches\n\texclude: ".classname", // a selector to exclude elements from processing\n\tcallback: function(mutation) { // a function which gets a mutation object according to #https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n\t\tCoCreateFetch.initElement(mutation.target)\n\t}\n})\n*/\n\n/**\n * description\n * \n * @param {String} [name] - an optional name to provide for debugging console\n * @param {Array} observe - a list of mutation type to be observerd, a mix of possible `attributes`, `childList` or `subtree`\n * ... and other params can be here \n * \n * @return null\n */\nwindow.profiler = {};\nwindow.counter = 0;\nwindow.counter2 = 0;\nwindow.targets = {};\nwindow.attributeName = {};\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n\n    while (--i >= 0 && matches.item(i) !== this) {}\n\n    return i > -1;\n  };\n}\n\nconst CoCreateObserver = {\n  initTasks: new Map(),\n  attrTasks: new Map(),\n  rules: new Map(),\n  rulesArray: [],\n  __init: function () {\n    const self = this;\n    const observer = new MutationObserver((mutationsList, observer) => self.__callback(mutationsList, observer)); // setTimeout(()=>{\n\n    observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: false,\n      attributeOldValue: true,\n      characterData: true\n    });\n  },\n  // init: function(data) {\n  //   this.add(data);\n  // },\n  init: function ({\n    observe,\n    include,\n    exclude,\n    attributes,\n    name,\n    callback\n  }) {\n    console.log(\' aaaaaaaaaaaaaa observer init \', name); // if (name == \'ccAttribute\' || name == \'ccCss\') {\n\n    if (observe.some(x => x == "childList")) {\n      this.initTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    }\n\n    if (observe.some(x => x == "attributes")) {\n      this.attrTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    } // }\n\n  },\n  remove: function (callback) {\n    this.initTasks.delete(callback);\n    this.attrTasks.delete(callback);\n  },\n  addRule: function ({\n    include,\n    exclude,\n    name\n  }) {\n    this.rules.set(name, {\n      include,\n      exclude\n    });\n    this.rulesArray = Array.from(this.rules);\n  },\n  removeRule: function ({\n    name\n  }) {\n    this.rules.delete(name);\n    this.rulesArray = Array.from(this.rules);\n  },\n  __callback: function (mutationsList, observer) {\n    // console.log(this)\n    window.counter++;\n\n    for (let mutation of mutationsList) {\n      if (mutation.type == "childList" && mutation.addedNodes.length > 0) {\n        //. run init functions\n        this.__initCallback(mutation);\n      }\n\n      if (mutation.type == "attributes") {\n        //. run attributes functions\n        this.__attrCallback(mutation);\n      }\n    }\n  },\n  __initCallback: function (mutation) {\n    let addedNodes = Array.from(mutation.addedNodes);\n    this.initTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      mutation.addedNodes.forEach(el => {\n        if (!el.tagName) return;\n\n        if (include && !(el.matches(include) || el.querySelector(include))) {\n          return;\n        }\n\n        if (exclude && (el.matches(exclude) || el.querySelector(exclude))) {\n          return;\n        } // if (el.created) return;\n        // window.counter2++;\n        // window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n        // window.targets[mutation.target.id || mutation.target.tagName] =\n        //   window.targets[mutation.target.id || mutation.target.tagName] != undefined ?\n        //   window.targets[mutation.target.id || mutation.target.tagName] + 1 :\n        //   0;\n        // window.attributeName[mutation.attributeName] =\n        //   window.attributeName[mutation.attributeName] != undefined ?\n        //   window.attributeName[mutation.attributeName] + 1 :\n        //   0;\n\n\n        callback.apply(null, [{\n          type: mutation.type,\n          target: el\n        }]);\n      });\n    }); // addedNodes.map(el => el.created = true);\n  },\n  __attrCallback: function (mutation) {\n    for (let [name, {\n      include,\n      exclude\n    }] of this.rulesArray) {\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n    }\n\n    this.attrTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      if (attributes && mutation.attributeName && !attributes.includes(mutation.attributeName)) {\n        return;\n      }\n\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n\n      if (mutation.attributeName) {\n        let newValue = mutation.target.getAttribute(mutation.attributeName);\n\n        if (newValue != mutation.oldValue) {\n          // window.counter2++;\n          // window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n          // window.targets[mutation.target.id || mutation.target.tagName] =\n          //   window.targets[mutation.target.id || mutation.target.tagName] != undefined ?\n          //   window.targets[mutation.target.id || mutation.target.tagName] + 1 :\n          //   0;\n          // window.attributeName[mutation.attributeName] =\n          //   window.attributeName[mutation.attributeName] != undefined ?\n          //   window.attributeName[mutation.attributeName] + 1 :\n          //   0;\n          callback.apply(null, [mutation]);\n        }\n      }\n    });\n  },\n  setInitialized: function (element, type) {\n    // element.setAttribute(`initialized_${type}`, "true");\n    type = type || "";\n    let key = "co_initialized_" + type;\n    element[key] = true;\n  },\n  getInitialized: function (element, type) {\n    type = type || "";\n    let key = "co_initialized_" + type;\n\n    if (!element[key]) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n\nCoCreateObserver.__init();\n\nvar _default = CoCreateObserver;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-observer/src/index.js\n')},"./src/adapter.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! ./select.js */ \"./src/select.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nvar _form = _interopRequireDefault(__webpack_require__(/*! @cocreate/form */ \"../CoCreate-form/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst SelectAdapter = {\n  init: function () {\n    this.initElement();\n\n    this.__initEvents();\n  },\n  initElement: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let containerList = mainContainer.querySelectorAll('cocreate-select, div.select--field');\n\n    for (let i = 0; i < containerList.length; i++) {\n      _select.default.__initSelect(containerList[i]);\n\n      this.__initElementEvent(containerList[i]);\n    }\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('dndsuccess', function (e) {\n      const {\n        dropedEl,\n        dragedEl\n      } = e.detail;\n\n      if (typeof dropedEl.tagName != 'undefined' && dropedEl.tagName.toLowerCase() == 'cocreate-select' || dropedEl.classList.contains('select--field')) {\n        self.save(dropedEl);\n        dropedEl.dispatchEvent(new CustomEvent('selectedValue'));\n      }\n    });\n    document.addEventListener('CoCreateSelect-save', function (e) {\n      const {\n        detail: {\n          element\n        }\n      } = e;\n\n      if (!element) {\n        return;\n      }\n\n      self.save(element);\n    });\n\n    _crudClient.default.listen('readDocument', function (data) {\n      if (data.metadata == 'cocreate-select') {\n        _select.default.setValue(data);\n      }\n    });\n\n    _crudClient.default.listen('updateDocument', function (data) {\n      if (data.metadata == 'cocreate-select') {\n        _select.default.setValue(data);\n      }\n    });\n\n    document.addEventListener('CoCreate-selected', function (e) {\n      const {\n        detail: {\n          element,\n          value\n        }\n      } = e;\n      console.log(e.detail);\n    });\n  },\n  __initElementEvent: function (selectContainer) {\n    const self = this;\n    selectContainer.addEventListener('set-document_id', function () {\n      self.save(this);\n    }); //. fetch logic\n\n    let collection = selectContainer.getAttribute('data-collection') || 'module_activity';\n    let id = selectContainer.getAttribute('data-document_id');\n\n    if (collection && id) {\n      _crudClient.default.readDocument({\n        'collection': collection,\n        'document_id': id,\n        'metadata': 'cocreate-select'\n      });\n    }\n  },\n  __sendRequest: function (selectContainer) {\n    let collection = selectContainer.getAttribute('data-collection') || 'module_activity';\n    let id = selectContainer.getAttribute('data-document_id');\n\n    if (collection && id) {\n      _crudClient.default.readDocument({\n        'collection': collection,\n        'document_id': id,\n        'metadata': 'cocreate-select'\n      });\n    }\n  },\n  save: function (element, isStore = true) {\n    let value = _select.default.getValue(element);\n\n    let collection = element.getAttribute('data-collection') || 'module_activity';\n    let id = element.getAttribute('data-document_id');\n    let name = element.getAttribute('name');\n    let realtime = element.getAttribute('data-realtime') || \"true\";\n    if (!name) return;\n    if (realtime != \"true\" && !isStore) return;\n\n    if (element.getAttribute('data-save_value') == 'false') {\n      return;\n    }\n\n    if (!_form.default.checkID(element)) {\n      _form.default.request({\n        element,\n        value,\n        nameAttr: \"name\"\n      });\n\n      element.setAttribute('data-document_id', 'pending');\n    } else if (id) {\n      _crudClient.default.updateDocument({\n        'collection': collection,\n        'document_id': id,\n        'data': {\n          [name]: value\n        },\n        'upsert': true,\n        'metadata': 'cocreate-select'\n      });\n    }\n  }\n};\nvar _default = SelectAdapter;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/adapter.js\n")},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! ./select.js */ \"./src/select.js\"));\n\nvar _adapter = _interopRequireDefault(__webpack_require__(/*! ./adapter.js */ \"./src/adapter.js\"));\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _form = _interopRequireDefault(__webpack_require__(/*! @cocreate/form */ \"../CoCreate-form/src/index.js\"));\n\n__webpack_require__(/*! ./CoCreate-select.css */ \"./src/CoCreate-select.css\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_adapter.default.init();\n\n_select.default.adapter = _adapter.default;\n\n_observer.default.init({\n  name: 'CoCreateSelectAttributes',\n  observe: ['attributes'],\n  attributes: ['data-document_id'],\n  include: 'cocreate-select',\n  callback: function (mutation) {\n    _adapter.default.__sendRequest(mutation.target);\n  }\n});\n\n_observer.default.init({\n  name: 'CoCreateSelect',\n  observe: ['subtree', 'childList'],\n  include: 'cocreate-select',\n  callback: function (mutation) {\n    _adapter.default.initElement(mutation.target);\n  }\n});\n\n_form.default.init({\n  name: 'CoCreateSelect',\n  selector: \"cocreate-select\",\n  callback: function (el) {\n    _adapter.default.save(el);\n  }\n});\n\nvar _default = _select.default;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZWxlY3QvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJTZWxlY3RBZGFwdGVyIiwiaW5pdCIsIkNvQ3JlYXRlU2VsZWN0IiwiYWRhcHRlciIsIkNvQ3JlYXRlT2JzZXJ2ZXIiLCJuYW1lIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJpbmNsdWRlIiwiY2FsbGJhY2siLCJtdXRhdGlvbiIsIl9fc2VuZFJlcXVlc3QiLCJ0YXJnZXQiLCJpbml0RWxlbWVudCIsImZvcm0iLCJzZWxlY3RvciIsImVsIiwic2F2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLGlCQUFjQyxJQUFkOztBQUNBQyxnQkFBZUMsT0FBZixHQUF5QkgsZ0JBQXpCOztBQUVBSSxrQkFBaUJILElBQWpCLENBQXNCO0FBQ3JCSSxNQUFJLEVBQUUsMEJBRGU7QUFFckJDLFNBQU8sRUFBRSxDQUFDLFlBQUQsQ0FGWTtBQUdyQkMsWUFBVSxFQUFFLENBQUMsa0JBQUQsQ0FIUztBQUlyQkMsU0FBTyxFQUFFLGlCQUpZO0FBS3JCQyxVQUFRLEVBQUUsVUFBU0MsUUFBVCxFQUFtQjtBQUM1QlYscUJBQWNXLGFBQWQsQ0FBNEJELFFBQVEsQ0FBQ0UsTUFBckM7QUFDQTtBQVBvQixDQUF0Qjs7QUFVQVIsa0JBQWlCSCxJQUFqQixDQUFzQjtBQUNyQkksTUFBSSxFQUFFLGdCQURlO0FBRXJCQyxTQUFPLEVBQUUsQ0FBQyxTQUFELEVBQVksV0FBWixDQUZZO0FBR3JCRSxTQUFPLEVBQUUsaUJBSFk7QUFJckJDLFVBQVEsRUFBRSxVQUFTQyxRQUFULEVBQW1CO0FBQzVCVixxQkFBY2EsV0FBZCxDQUEwQkgsUUFBUSxDQUFDRSxNQUFuQztBQUNBO0FBTm9CLENBQXRCOztBQVNBRSxjQUFLYixJQUFMLENBQVU7QUFDVEksTUFBSSxFQUFFLGdCQURHO0FBRVRVLFVBQVEsRUFBRSxpQkFGRDtBQUdUTixVQUFRLEVBQUUsVUFBU08sRUFBVCxFQUFhO0FBQ3RCaEIscUJBQWNpQixJQUFkLENBQW1CRCxFQUFuQjtBQUNBO0FBTFEsQ0FBVjs7ZUFPZWQsZSIsImZpbGUiOiIuL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb0NyZWF0ZVNlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIlxuaW1wb3J0IFNlbGVjdEFkYXB0ZXIgZnJvbSBcIi4vYWRhcHRlci5qc1wiXG5pbXBvcnQgQ29DcmVhdGVPYnNlcnZlciBmcm9tICdAY29jcmVhdGUvb2JzZXJ2ZXInO1xuaW1wb3J0IGZvcm0gZnJvbSAnQGNvY3JlYXRlL2Zvcm0nXG5pbXBvcnQgJy4vQ29DcmVhdGUtc2VsZWN0LmNzcyc7XG5cblNlbGVjdEFkYXB0ZXIuaW5pdCgpO1xuQ29DcmVhdGVTZWxlY3QuYWRhcHRlciA9IFNlbGVjdEFkYXB0ZXI7XG5cbkNvQ3JlYXRlT2JzZXJ2ZXIuaW5pdCh7IFxuXHRuYW1lOiAnQ29DcmVhdGVTZWxlY3RBdHRyaWJ1dGVzJywgXG5cdG9ic2VydmU6IFsnYXR0cmlidXRlcyddLFxuXHRhdHRyaWJ1dGVzOiBbJ2RhdGEtZG9jdW1lbnRfaWQnXSxcblx0aW5jbHVkZTogJ2NvY3JlYXRlLXNlbGVjdCcsIFxuXHRjYWxsYmFjazogZnVuY3Rpb24obXV0YXRpb24pIHtcblx0XHRTZWxlY3RBZGFwdGVyLl9fc2VuZFJlcXVlc3QobXV0YXRpb24udGFyZ2V0KVxuXHR9XG59KTtcblxuQ29DcmVhdGVPYnNlcnZlci5pbml0KHsgXG5cdG5hbWU6ICdDb0NyZWF0ZVNlbGVjdCcsIFxuXHRvYnNlcnZlOiBbJ3N1YnRyZWUnLCAnY2hpbGRMaXN0J10sXG5cdGluY2x1ZGU6ICdjb2NyZWF0ZS1zZWxlY3QnLCBcblx0Y2FsbGJhY2s6IGZ1bmN0aW9uKG11dGF0aW9uKSB7XG5cdFx0U2VsZWN0QWRhcHRlci5pbml0RWxlbWVudChtdXRhdGlvbi50YXJnZXQpXG5cdH1cbn0pO1xuXG5mb3JtLmluaXQoe1xuXHRuYW1lOiAnQ29DcmVhdGVTZWxlY3QnLFxuXHRzZWxlY3RvcjogXCJjb2NyZWF0ZS1zZWxlY3RcIixcblx0Y2FsbGJhY2s6IGZ1bmN0aW9uKGVsKSB7XG5cdFx0U2VsZWN0QWRhcHRlci5zYXZlKGVsKTtcblx0fVxufSk7XG5leHBvcnQgZGVmYXVsdCBDb0NyZWF0ZVNlbGVjdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n")},"./src/select.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateSelect = {\n  init: function () {\n    this.initElement(); // this.__initEvents()\n  },\n  initElement: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let containerList = mainContainer.querySelectorAll('cocreate-select, div.select--field');\n\n    for (let i = 0; i < containerList.length; i++) {\n      let selectContainer = containerList[i];\n\n      this.__initSelect(selectContainer);\n    }\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('dndsuccess', function (e) {\n      const {\n        dropedEl,\n        dragedEl\n      } = e.detail;\n\n      if (typeof dropedEl.tagName != 'undefined' && dropedEl.tagName.toLowerCase() == 'cocreate-select' || dropedEl.classList.contains('select--field')) {\n        self.save(dropedEl);\n\n        self.__fireSelectedEvent(dropedEl);\n      }\n    });\n  },\n  __initSelect: function (selectContainer) {\n    if (_observer.default.getInitialized(selectContainer, \"cocreate-select\")) {\n      return;\n    }\n\n    _observer.default.setInitialized(selectContainer, \"cocreate-select\");\n\n    let input = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n    const self = this;\n\n    if (input) {\n      input.addEventListener('keydown', function (e) {\n        let keyCode = e.keyCode;\n\n        if (keyCode == 13) {\n          e.preventDefault();\n        }\n\n        if (keyCode == 13 && this.value.length > 0) {\n          self.__selectValue(this.value, selectContainer);\n\n          self.save(selectContainer);\n\n          self.__fireSelectedEvent(selectContainer);\n\n          this.value = '';\n        } else if (keyCode == 8 && !this.value.length) {\n          let selectedItems = selectContainer.querySelectorAll('[selected]');\n\n          if (selectedItems.length > 0) {\n            selectedItems[selectedItems.length - 1].remove();\n            self.save(selectContainer);\n\n            self.__fireSelectedEvent(selectContainer);\n          }\n        }\n      });\n    }\n\n    document.addEventListener('click', function (event) {\n      var isClickInside = selectContainer.contains(event.target);\n\n      if (!isClickInside) {\n        self.__closeDropDown(selectContainer);\n      }\n    });\n    ul_selector.addEventListener('click', function (e) {\n      if (!e.target.matches('li')) {\n        let li = e.target;\n\n        while (typeof li.tagName != 'undefined' && li.tagName.toLowerCase() != 'li') {\n          li = li.parentNode;\n        }\n\n        if (li.classList && li.classList.contains('selectable')) {\n          // check if data exist\n          let value = li.getAttribute('value');\n          let selectValue = self.getValue(selectContainer);\n          if (value == selectValue || selectValue.indexOf(value) > -1) return; /// here emit event\n\n          self.__selectItem(li, selectContainer);\n\n          self.save(selectContainer);\n\n          self.__fireSelectedEvent(selectContainer);\n        }\n      }\n    });\n    selectContainer.addEventListener('click', function (e) {\n      if (e.target.matches('.remove')) {\n        e.target.parentNode.remove();\n        self.save(selectContainer);\n\n        self.__fireSelectedEvent(selectContainer);\n\n        return;\n      }\n\n      if (!ul_selector.classList.contains('open')) {\n        self.__openDropDown(selectContainer);\n      }\n\n      let input = selectContainer.querySelector('input');\n\n      if (input) {\n        input.focus();\n      }\n    }, true);\n  },\n  __openDropDown: function (selectContainer, focus = true) {\n    if (focus) {\n      let input = selectContainer.querySelector('input');\n      let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n      if (input) {\n        input.classList.add('open');\n        input.focus();\n      }\n\n      if (ul_selector && ul_selector) {\n        ul_selector.classList.add('open');\n      } //floating label\n\n      /*console.log(\"selectContainer \",selectContainer)\n      let floating_label_field = selectContainer.closest(\".floating-label_field\");\n      if(floating_label_field){\n        */\n\n\n      selectContainer.classList.add('active'); //}\n\n      selectContainer.dispatchEvent(new CustomEvent('CoCreateSelect-open'));\n    }\n  },\n  __closeDropDown: function (selectContainer) {\n    let input = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (input && input.classList.contains('open')) {\n      input.classList.remove('open');\n    }\n    /*delete active floating label*/\n\n\n    let value = input.value; //let floating_label_field = selectContainer.closest(\".floating-label_field\");\n\n    const active = selectContainer.hasAttribute('active');\n    if (!active && (!value || value.length == 0)) selectContainer.classList.remove('active');\n    /*_End floating label*/\n\n    if (ul_selector && ul_selector.classList.contains('open')) {\n      ul_selector.classList.remove('open');\n      selectContainer.dispatchEvent(new CustomEvent('CoCreateSelect-close'));\n    }\n  },\n  setValue: function (data) {\n    const self = this;\n    let selectContainers = document.querySelectorAll('cocreate-select,.select--field');\n    selectContainers.forEach(selectEl => {\n      const collection = selectEl.getAttribute('data-collection') || 'module_activity';\n      const id = selectEl.getAttribute('data-document_id');\n      const name = selectEl.getAttribute('name');\n\n      if (data['collection'] == collection && data['document_id'] == id && name) {\n        self.__renderValue(selectEl, data['data'][name]);\n      }\n    });\n  },\n  renderValue: function (target, value) {\n    this.__renderValue(target, value);\n  },\n  __renderValue: function (selectContainer, values) {\n    if (!values) {\n      return;\n    }\n\n    let selectedItems = selectContainer.querySelectorAll('[selected]');\n    selectedItems.forEach(item => item.remove());\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (values && typeof values === 'string') {\n      values = [values];\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const selectedItem = ul_selector.querySelector(\"li[value='\" + values[i] + \"']\");\n\n      if (selectedItem) {\n        this.__selectItem(selectedItem, selectContainer, false);\n      } else {\n        this.__selectValue(values[i], selectContainer, false);\n      }\n    }\n\n    try {\n      if (CoCreateFloatLabel) {\n        CoCreateFloatLabel.update(selectContainer, values && values.length > 0);\n      }\n    } catch (err) {}\n  },\n  __selectValue: function (value, selectContainer) {\n    let currentValue = this.getValue(selectContainer);\n    if (currentValue == value || currentValue.indexOf(value) > -1) return;\n    let searchInput = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n    let span = document.createElement('span');\n    span.innerHTML = 'x';\n    span.classList.add('remove');\n    let li = document.createElement('li');\n    li.setAttribute('value', value); // li.setAttribute('data-value', value);\n\n    li.innerHTML = value;\n    li.setAttribute('selected', \"\"); // li.classList.add('selected');\n\n    li.classList.remove('selectable');\n    li.appendChild(span);\n    selectContainer.insertBefore(li, searchInput ? searchInput : ul_selector);\n  },\n  __selectItem: function (li, selectContainer, focus = true) {\n    let type = selectContainer.hasAttribute('multiple') ? 'multiple' : 'single';\n    let searchInput = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (type == 'single') {\n      let selectedItems = selectContainer.querySelectorAll('[selected]');\n      selectedItems.forEach(item => item.remove());\n\n      if (searchInput) {\n        searchInput.value = '';\n      }\n    }\n\n    let span = document.createElement('span');\n    span.innerHTML = 'x';\n    span.classList.add('remove');\n    let selectedItem = li.cloneNode(true); // selectedItem.classList.add('selected');\n\n    selectedItem.setAttribute(\"selected\", \"\");\n    selectedItem.classList.remove('selectable');\n    selectedItem.appendChild(span);\n    selectContainer.insertBefore(selectedItem, searchInput ? searchInput : ul_selector);\n\n    if (type == 'single') {\n      this.__closeDropDown(selectContainer);\n    }\n  },\n  getValue: function (node) {\n    let type = node.hasAttribute('multiple') ? 'multiple' : 'single';\n    let selectedItems = node.querySelectorAll('[selected]');\n    let value = [];\n\n    if (selectedItems.length > 0) {\n      selectedItems.forEach(item => value.push(item.getAttribute('value')));\n    }\n\n    value = type === 'multiple' ? value : value[0] || '';\n    return value;\n  },\n  save: function (selectEl) {\n    if (!selectEl) {\n      return;\n    }\n\n    let event = new CustomEvent('CoCreateSelect-save', {\n      detail: {\n        element: selectEl\n      }\n    });\n    document.dispatchEvent(event);\n  },\n  __fireSelectedEvent: function (element) {\n    element.dispatchEvent(new CustomEvent('selectedValue'));\n    element.dispatchEvent(new CustomEvent('input', {\n      bubbles: true\n    }));\n    let value = this.getValue(element);\n    document.dispatchEvent(new CustomEvent('CoCreate-selected', {\n      detail: {\n        element: element,\n        value: value\n      }\n    }));\n  }\n};\nvar _default = CoCreateSelect;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/select.js\n")},"../CoCreate-socket-client/src/common-fun.js":(module,exports)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory(window);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== \'undefined\' ? self : void 0, function (wnd) {\n  function getCommonParams() {\n    let config = {};\n\n    if (wnd && wnd.config) {\n      config = wnd.config;\n    }\n\n    return {\n      "apiKey": config.apiKey,\n      "securityKey": config.securityKey,\n      "organization_id": config.organization_Id\n    };\n  }\n\n  function getCommonParamsExtend(info) {\n    let config = {};\n    if (wnd && wnd.config) config = wnd.config;\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n\n  function generateSocketClient(namespace, room) {\n    let config = {};\n    if (wnd && wnd.config) config = wnd.config;\n    let ns = namespace || config.organization_Id;\n    let rr = room || \'\';\n\n    if (rr) {\n      return `${ns}/${rr}`;\n    } else {\n      return ns;\n    }\n  }\n\n  function GenerateUUID(length = 36) {\n    let d = new Date().getTime();\n    let d2 = 0;\n    let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n    if (length <= pattern.length) {\n      pattern = pattern.substr(0, length);\n    } else {\n      let add_len = length - pattern.length;\n      let sub_pattern = "-xxxyyxxx";\n      let group_n = Math.floor(add_len / sub_pattern.length);\n\n      for (let i = 0; i < group_n; i++) {\n        pattern += sub_pattern;\n      }\n\n      group_n = add_len - group_n * sub_pattern.length;\n      pattern += sub_pattern.substr(0, group_n);\n    }\n\n    let uuid = pattern.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16;\n\n      if (d > 0) {\n        var r = (d + r) % 16 | 0;\n        d = Math.floor(d / 16);\n      } else {\n        var r = (d2 + r) % 16 | 0;\n        d2 = Math.floor(d2 / 16);\n      }\n\n      return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n    });\n    return uuid;\n  }\n\n  return {\n    getCommonParams,\n    getCommonParamsExtend,\n    generateSocketClient,\n    GenerateUUID\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZWxlY3QvLi4vQ29DcmVhdGUtc29ja2V0LWNsaWVudC9zcmMvY29tbW9uLWZ1bi5qcz9mZWMzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwid2luZG93Iiwic2VsZiIsInduZCIsImdldENvbW1vblBhcmFtcyIsImNvbmZpZyIsImFwaUtleSIsInNlY3VyaXR5S2V5Iiwib3JnYW5pemF0aW9uX0lkIiwiZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kIiwiaW5mbyIsIm9yZ2FuaXphdGlvbl9pZCIsImdlbmVyYXRlU29ja2V0Q2xpZW50IiwibmFtZXNwYWNlIiwicm9vbSIsIm5zIiwicnIiLCJHZW5lcmF0ZVVVSUQiLCJsZW5ndGgiLCJkIiwiRGF0ZSIsImdldFRpbWUiLCJkMiIsInBhdHRlcm4iLCJzdWJzdHIiLCJhZGRfbGVuIiwic3ViX3BhdHRlcm4iLCJncm91cF9uIiwiTWF0aCIsImZsb29yIiwiaSIsInV1aWQiLCJyZXBsYWNlIiwiYyIsInIiLCJyYW5kb20iLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7QUFBQyxXQUFVQSxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QjtBQUN0QixNQUFJLElBQUosRUFBZ0Q7QUFDNUM7QUFDQUMscUNBQU8sRUFBRCxtQ0FBSyxZQUFXO0FBQ3JCLGFBQU9ELE9BQU8sQ0FBQ0UsTUFBRCxDQUFkO0FBQ0EsS0FGSztBQUFBLGtHQUFOO0FBR0gsR0FMRCxNQUtPLEVBUVI7QUFDRixDQWZBLEVBZUMsT0FBT0MsSUFBUCxLQUFnQixXQUFoQixHQUE4QkEsSUFBOUIsU0FmRCxFQWU0QyxVQUFVQyxHQUFWLEVBQWU7QUFDMUQsV0FBU0MsZUFBVCxHQUNBO0FBQ0UsUUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsUUFBSUYsR0FBRyxJQUFJQSxHQUFHLENBQUNFLE1BQWYsRUFBdUI7QUFDckJBLFlBQU0sR0FBR0YsR0FBRyxDQUFDRSxNQUFiO0FBQ0Q7O0FBRUQsV0FBTztBQUNM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V1AsRUFBRSxHQUFHLEVBQWhCLENBQUw7QUFDRDs7QUFDRCxhQUFPLENBQUNXLENBQUMsSUFBSSxHQUFMLEdBQVdDLENBQVgsR0FBZ0JBLENBQUMsR0FBRyxHQUFMLEdBQVksR0FBNUIsRUFBaUNFLFFBQWpDLENBQTBDLEVBQTFDLENBQVA7QUFDRCxLQVZVLENBQVg7QUFXQSxXQUFPTCxJQUFQO0FBQ0Q7O0FBRUQsU0FBTztBQUFDM0IsbUJBQUQ7QUFBa0JLLHlCQUFsQjtBQUF5Q0csd0JBQXpDO0FBQStESztBQUEvRCxHQUFQO0FBQ0QsQ0E1RkEsQ0FBRCIsImZpbGUiOiIuLi9Db0NyZWF0ZS1zb2NrZXQtY2xpZW50L3NyYy9jb21tb24tZnVuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIFx0cmV0dXJuIGZhY3Rvcnkod2luZG93KVxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkobnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSh3aW5kb3cpO1xuICB9XG59KHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbiAod25kKSB7XG4gIGZ1bmN0aW9uIGdldENvbW1vblBhcmFtcygpIFxuICB7XG4gICAgbGV0IGNvbmZpZyA9IHt9O1xuICAgIGlmICh3bmQgJiYgd25kLmNvbmZpZykge1xuICAgICAgY29uZmlnID0gd25kLmNvbmZpZ1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgXCJhcGlLZXlcIjogICAgICAgICAgIGNvbmZpZy5hcGlLZXksXG4gICAgICBcInNlY3VyaXR5S2V5XCI6ICAgICAgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgICAgXCJvcmdhbml6YXRpb25faWRcIjogIGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBnZXRDb21tb25QYXJhbXNFeHRlbmQoaW5mbykgXG4gIHtcbiAgICBsZXQgY29uZmlnID0ge307XG4gICAgaWYgKHduZCAmJiB3bmQuY29uZmlnKSBjb25maWcgPSB3bmQuY29uZmlnXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIFwiYXBpS2V5XCI6ICAgICAgICAgICBpbmZvLmFwaUtleSB8fCBjb25maWcuYXBpS2V5LFxuICAgICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGluZm8uc2VjdXJpdHlLZXkgfHwgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgICAgXCJvcmdhbml6YXRpb25faWRcIjogIGluZm8ub3JnYW5pemF0aW9uX2lkIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBnZW5lcmF0ZVNvY2tldENsaWVudCAobmFtZXNwYWNlLCByb29tKSBcbiAge1xuICAgIGxldCBjb25maWcgPSB7fTtcbiAgICBpZiAod25kICYmIHduZC5jb25maWcpIGNvbmZpZyA9IHduZC5jb25maWdcbiAgICBcbiAgICBsZXQgbnMgPSBuYW1lc3BhY2UgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZFxuICAgIGxldCByciA9IHJvb20gfHwgJyc7XG4gICAgaWYgKHJyKSB7XG4gICAgICByZXR1cm4gYCR7bnN9LyR7cnJ9YFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnM7XG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBHZW5lcmF0ZVVVSUQobGVuZ3RoID0gMzYpIHtcbiAgICBsZXQgZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGxldCBkMiA9IDA7XG4gICAgbGV0IHBhdHRlcm4gPSBcInV4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiO1xuICBcbiAgICBpZiAobGVuZ3RoIDw9IHBhdHRlcm4ubGVuZ3RoKSB7XG4gICAgICBwYXR0ZXJuID0gcGF0dGVybi5zdWJzdHIoMCwgbGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGFkZF9sZW4gPSBsZW5ndGggLSBwYXR0ZXJuLmxlbmd0aDtcbiAgICAgIGxldCBzdWJfcGF0dGVybiA9IFwiLXh4eHl5eHh4XCI7XG4gIFxuICAgICAgbGV0IGdyb3VwX24gPSBNYXRoLmZsb29yKGFkZF9sZW4gLyBzdWJfcGF0dGVybi5sZW5ndGgpO1xuICBcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBfbjsgaSsrKSB7XG4gICAgICAgIHBhdHRlcm4gKz0gc3ViX3BhdHRlcm47XG4gICAgICB9XG4gIFxuICAgICAgZ3JvdXBfbiA9IGFkZF9sZW4gLSBncm91cF9uICogc3ViX3BhdHRlcm4ubGVuZ3RoO1xuICAgICAgcGF0dGVybiArPSBzdWJfcGF0dGVybi5zdWJzdHIoMCwgZ3JvdXBfbik7XG4gICAgfVxuICBcbiAgICBsZXQgdXVpZCA9IHBhdHRlcm4ucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTY7XG4gICAgICBpZiAoZCA+IDApIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIHIpICUgMTYgfCAwO1xuICAgICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHIgPSAoZDIgKyByKSAlIDE2IHwgMDtcbiAgICAgICAgZDIgPSBNYXRoLmZsb29yKGQyIC8gMTYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChjID09IFwieFwiID8gciA6IChyICYgMHg3KSB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiB1dWlkO1xuICB9XG4gIFxuICByZXR1cm4ge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudCwgR2VuZXJhdGVVVUlEfTtcbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-socket-client/src/common-fun.js\n')},"../CoCreate-socket-client/src/index.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./common-fun.js */ \"../CoCreate-socket-client/src/common-fun.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (commonFunc) {\n      return factory(commonFunc, window, WebSocket, Blob);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function (commonFunc, wnd, WebSocket, Blob) {\n  class CoCreateSocketClient {\n    constructor(prefix = \"crud\") {\n      this.prefix = prefix || \"crud\";\n      this.sockets = new Map();\n      this.listeners = new Map();\n      this.messageQueue = new Map();\n      this.saveFileName = '';\n      this.globalScope = \"\";\n    }\n\n    setGlobalScope(scope) {\n      this.globalScope = `${this.prefix}/${scope}`;\n    }\n\n    getGlobalScope() {\n      return this.globalScope;\n    }\n    /**\n     * config: {namespace, room, host}\n     */\n\n\n    create(config) {\n      const {\n        namespace,\n        room\n      } = config;\n      const key = this.getKey(namespace, room);\n\n      let _this = this;\n\n      if (namespace) {\n        this.setGlobalScope(namespace);\n      }\n\n      let socket;\n\n      if (this.sockets.get(key)) {\n        socket = this.sockets.get(key);\n        console.log('SOcket already has been register');\n        return;\n      }\n\n      let w_protocol = wnd.location.protocol;\n\n      if (wnd.location.protocol === \"about:\") {\n        w_protocol = wnd.parent.location.protocol;\n\n        if (!config.host) {\n          config.host = wnd.parent.location.host;\n        }\n      }\n\n      let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n      const port = config.port ? config.port : 8088;\n      let socket_url = `${protocol}://${wnd.location.host}:${port}/${key}`;\n\n      if (config.host) {\n        if (config.host.includes(\"://\")) {\n          socket_url = `${config.host}/${key}`;\n        } else {\n          if (config.host.includes(\":\")) {\n            socket_url = `${protocol}://${config.host}/${key}`;\n          } else {\n            socket_url = `${protocol}://${config.host}:${port}/${key}`;\n          }\n        }\n      }\n\n      try {\n        socket = new WebSocket(socket_url);\n      } catch (error) {\n        console.log(error);\n        return;\n      }\n\n      socket.onopen = function (event) {\n        const messages = _this.messageQueue.get(key) || [];\n        messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n        _this.sockets.set(key, socket);\n\n        _this.messageQueue.set(key, []);\n      };\n\n      socket.onclose = function (event) {\n        switch (event.code) {\n          case 1000:\n            // close normal\n            console.log(\"websocket: closed\");\n            break;\n\n          default:\n            _this.destroy(socket, key);\n\n            _this.reconnect(socket, config);\n\n            break;\n        }\n      };\n\n      socket.onerror = function (err) {\n        _this.destroy(socket, key);\n\n        _this.reconnect(socket, config);\n      };\n\n      socket.onmessage = function (data) {\n        try {\n          if (wnd.Blob) {\n            if (data.data instanceof Blob) {\n              _this.saveFile(data.data);\n\n              return;\n            }\n          }\n\n          let rev_data = JSON.parse(data.data);\n\n          if (rev_data.data.event) {\n            if (wnd.CustomEvent) {\n              var event = new wnd.CustomEvent(rev_data.data.event, {\n                detail: rev_data.data\n              });\n              wnd.document.dispatchEvent(event);\n              return;\n            } else {\n              process.emit(rev_data.data.event, rev_data.data);\n              return;\n            }\n          }\n\n          let action = rev_data.action;\n\n          const listeners = _this.listeners.get(rev_data.action);\n\n          if (!listeners) {\n            return;\n          }\n\n          listeners.forEach(listener => {\n            listener(rev_data.data, key);\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      };\n    }\n    /**\n     * \n     */\n\n\n    send(action, data, room) {\n      const obj = {\n        action: action,\n        data: { ...data,\n          uid: commonFunc.GenerateUUID()\n        }\n      };\n      const key = this.getKeyByRoom(room);\n      const socket = this.getByRoom(room);\n\n      if (socket) {\n        socket.send(JSON.stringify(obj));\n      } else {\n        if (this.messageQueue.get(key)) {\n          this.messageQueue.get(key).push(obj);\n        } else {\n          this.messageQueue.set(key, [obj]);\n        }\n      }\n    }\n\n    sendFile(file, room) {\n      const socket = this.getByRoom(room);\n\n      if (socket) {\n        socket.send(file);\n      }\n    }\n    /**\n     * scope: ns/room\n     */\n\n\n    listen(type, callback) {\n      if (!this.listeners.get(type)) {\n        this.listeners.set(type, [callback]);\n      } else {\n        this.listeners.get(type).push(callback);\n      }\n    }\n\n    reconnect(socket, config) {\n      let _this = this;\n\n      setTimeout(function () {\n        _this.create(config);\n      }, 1000);\n    }\n\n    destroy(socket, key) {\n      if (socket) {\n        socket.onerror = socket.onopen = socket.onclose = null;\n        socket.close();\n        socket = null;\n      }\n\n      if (this.sockets.get(key)) {\n        this.sockets.delete(key);\n      }\n    }\n\n    destroyByKey(key) {\n      let socket = this.sockets.get(key);\n\n      if (socket) {\n        this.destroy(socket, key);\n      }\n    }\n\n    getKey(namespace, room) {\n      let key = `${this.prefix}`;\n\n      if (namespace && namespace != '') {\n        if (room && room != '') {\n          key += `/${namespace}/${room}`;\n        } else {\n          key += `/${namespace}`;\n        }\n      }\n\n      return key;\n    }\n\n    getByRoom(room) {\n      let key = this.getKeyByRoom(room);\n      return this.sockets.get(key);\n    }\n\n    getKeyByRoom(room) {\n      let key = this.globalScope;\n\n      if (room) {\n        key = `${this.prefix}/${room}`;\n      }\n\n      return key;\n    }\n\n    saveFile(blob) {\n      if (wnd.document) {\n        const file_name = this.saveFileName || 'downloadFile';\n        var a = wnd.document.createElement(\"a\");\n        wnd.document.body.appendChild(a);\n        a.style = \"display: none\";\n        let url = window.URL.createObjectURL(blob);\n        a.href = url;\n        a.download = file_name;\n        a.click();\n        wnd.URL.revokeObjectURL(url);\n        this.saveFileName = '';\n      }\n    }\n\n    listenAsync(eventname) {\n      return new Promise((resolve, reject) => {\n        if (wnd.document) {\n          //. browser case\n          wnd.document.addEventListener(eventname, function (event) {\n            resolve(event.detail);\n          }, {\n            once: true\n          });\n        } else {\n          //. node case\n          process.once(eventname, data => {\n            resolve(data);\n          });\n        }\n      });\n    }\n\n  }\n\n  return CoCreateSocketClient;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZWxlY3QvLi4vQ29DcmVhdGUtc29ja2V0LWNsaWVudC9zcmMvaW5kZXguanM/ZWNjZSJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsImNvbW1vbkZ1bmMiLCJ3aW5kb3ciLCJXZWJTb2NrZXQiLCJCbG9iIiwic2VsZiIsInduZCIsIkNvQ3JlYXRlU29ja2V0Q2xpZW50IiwiY29uc3RydWN0b3IiLCJwcmVmaXgiLCJzb2NrZXRzIiwiTWFwIiwibGlzdGVuZXJzIiwibWVzc2FnZVF1ZXVlIiwic2F2ZUZpbGVOYW1lIiwiZ2xvYmFsU2NvcGUiLCJzZXRHbG9iYWxTY29wZSIsInNjb3BlIiwiZ2V0R2xvYmFsU2NvcGUiLCJjcmVhdGUiLCJjb25maWciLCJuYW1lc3BhY2UiLCJyb29tIiwia2V5IiwiZ2V0S2V5IiwiX3RoaXMiLCJzb2NrZXQiLCJnZXQiLCJjb25zb2xlIiwibG9nIiwid19wcm90b2NvbCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJwYXJlbnQiLCJob3N0IiwicG9ydCIsInNvY2tldF91cmwiLCJpbmNsdWRlcyIsImVycm9yIiwib25vcGVuIiwiZXZlbnQiLCJtZXNzYWdlcyIsImZvckVhY2giLCJtc2ciLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsInNldCIsIm9uY2xvc2UiLCJjb2RlIiwiZGVzdHJveSIsInJlY29ubmVjdCIsIm9uZXJyb3IiLCJlcnIiLCJvbm1lc3NhZ2UiLCJkYXRhIiwic2F2ZUZpbGUiLCJyZXZfZGF0YSIsInBhcnNlIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJkb2N1bWVudCIsImRpc3BhdGNoRXZlbnQiLCJwcm9jZXNzIiwiZW1pdCIsImFjdGlvbiIsImxpc3RlbmVyIiwiZSIsIm9iaiIsInVpZCIsIkdlbmVyYXRlVVVJRCIsImdldEtleUJ5Um9vbSIsImdldEJ5Um9vbSIsInB1c2giLCJzZW5kRmlsZSIsImZpbGUiLCJsaXN0ZW4iLCJ0eXBlIiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0IiwiY2xvc2UiLCJkZWxldGUiLCJkZXN0cm95QnlLZXkiLCJibG9iIiwiZmlsZV9uYW1lIiwiYSIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzdHlsZSIsInVybCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImhyZWYiLCJkb3dubG9hZCIsImNsaWNrIiwicmV2b2tlT2JqZWN0VVJMIiwibGlzdGVuQXN5bmMiLCJldmVudG5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIl0sIm1hcHBpbmdzIjoiOztBQUVDLFdBQVVBLElBQVYsRUFBZ0JDLE9BQWhCLEVBQXlCO0FBQ3RCLE1BQUksSUFBSixFQUFnRDtBQUM1QztBQUNBQyxxQ0FBTyxDQUFDLHlGQUFELENBQUQsbUNBQXNCLFVBQVNDLFVBQVQsRUFBcUI7QUFDaEQsYUFBT0YsT0FBTyxDQUFDRSxVQUFELEVBQWFDLE1BQWIsRUFBcUJDLFNBQXJCLEVBQWdDQyxJQUFoQyxDQUFkO0FBQ0EsS0FGSztBQUFBLGtHQUFOO0FBR0gsR0FMRCxNQUtPLEVBWVI7QUFDRixDQW5CQSxFQW1CQyxPQUFPQyxJQUFQLEtBQWdCLFdBQWhCLEdBQThCQSxJQUE5QixTQW5CRCxFQW1CNEMsVUFBVUosVUFBVixFQUFzQkssR0FBdEIsRUFBMkJILFNBQTNCLEVBQXNDQyxJQUF0QyxFQUE0QztBQUVyRixRQUFNRyxvQkFBTixDQUNIO0FBQ0NDLGVBQVcsQ0FBQ0MsTUFBTSxHQUFHLE1BQVYsRUFBa0I7QUFDNUIsV0FBS0EsTUFBTCxHQUFjQSxNQUFNLElBQUksTUFBeEI7QUFDQSxXQUFLQyxPQUFMLEdBQWUsSUFBSUMsR0FBSixFQUFmO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixJQUFJRCxHQUFKLEVBQWpCO0FBQ0EsV0FBS0UsWUFBTCxHQUFxQixJQUFJRixHQUFKLEVBQXJCO0FBQ0EsV0FBS0csWUFBTCxHQUFxQixFQUFyQjtBQUNBLFdBQUtDLFdBQUwsR0FBb0IsRUFBcEI7QUFDQTs7QUFFREMsa0JBQWMsQ0FBQ0MsS0FBRCxFQUFRO0FBQ3JCLFdBQUtGLFdBQUwsR0FBb0IsR0FBRSxLQUFLTixNQUFPLElBQUdRLEtBQU0sRUFBM0M7QUFDQTs7QUFFREMsa0JBQWMsR0FBRztBQUNoQixhQUFPLEtBQUtILFdBQVo7QUFDQTtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VJLFVBQU0sQ0FBRUMsTUFBRixFQUFVO0FBRWYsWUFBTTtBQUFDQyxpQkFBRDtBQUFZQztBQUFaLFVBQW9CRixNQUExQjtBQUNBLFlBQU1HLEdBQUcsR0FBRyxLQUFLQyxNQUFMLENBQVlILFNBQVosRUFBdUJDLElBQXZCLENBQVo7O0FBQ0EsVUFBSUcsS0FBSyxHQUFHLElBQVo7O0FBQ0EsVUFBSUosU0FBSixFQUFlO0FBQ2QsYUFBS0wsY0FBTCxDQUFvQkssU0FBcEI7QUFDQTs7QUFFRCxVQUFJSyxNQUFKOztBQUNBLFVBQUksS0FBS2hCLE9BQUwsQ0FBYWlCLEdBQWIsQ0FBaUJKLEdBQWpCLENBQUosRUFBMkI7QUFDMUJHLGNBQU0sR0FBRyxLQUFLaEIsT0FBTCxDQUFhaUIsR0FBYixDQUFpQkosR0FBakIsQ0FBVDtBQUNBSyxlQUFPLENBQUNDLEdBQVIsQ0FBWSxrQ0FBWjtBQUNBO0FBQ0E7O0FBRUQsVUFBSUMsVUFBVSxHQUFHeEIsR0FBRyxDQUFDeUIsUUFBSixDQUFhQyxRQUE5Qjs7QUFDQSxVQUFJMUIsR0FBRyxDQUFDeUIsUUFBSixDQUFhQyxRQUFiLEtBQTBCLFFBQTlCLEVBQXdDO0FBQ3ZDRixrQkFBVSxHQUFHeEIsR0FBRyxDQUFDMkIsTUFBSixDQUFXRixRQUFYLENBQW9CQyxRQUFqQzs7QUFDQSxZQUFJLENBQUNaLE1BQU0sQ0FBQ2MsSUFBWixFQUFrQjtBQUNqQmQsZ0JBQU0sQ0FBQ2MsSUFBUCxHQUFjNUIsR0FBRyxDQUFDMkIsTUFBSixDQUFXRixRQUFYLENBQW9CRyxJQUFsQztBQUNBO0FBQ0Q7O0FBQ0QsVUFBSUYsUUFBUSxHQUFHRixVQUFVLEtBQUssT0FBZixHQUF5QixJQUF6QixHQUFnQyxLQUEvQztBQUVBLFlBQU1LLElBQUksR0FBR2YsTUFBTSxDQUFDZSxJQUFQLEdBQWNmLE1BQU0sQ0FBQ2UsSUFBckIsR0FBNEIsSUFBekM7QUFFQSxVQUFJQyxVQUFVLEdBQUksR0FBRUosUUFBUyxNQUFLMUIsR0FBRyxDQUFDeUIsUUFBSixDQUFhRyxJQUFLLElBQUdDLElBQUssSUFBR1osR0FBSSxFQUFuRTs7QUFFQSxVQUFJSCxNQUFNLENBQUNjLElBQVgsRUFBaUI7QUFDaEIsWUFBSWQsTUFBTSxDQUFDYyxJQUFQLENBQVlHLFFBQVosQ0FBcUIsS0FBckIsQ0FBSixFQUFpQztBQUNoQ0Qsb0JBQVUsR0FBSSxHQUFFaEIsTUFBTSxDQUFDYyxJQUFLLElBQUdYLEdBQUksRUFBbkM7QUFDQSxTQUZELE1BRU87QUFDTixjQUFJSCxNQUFNLENBQUNjLElBQVAsQ0FBWUcsUUFBWixDQUFxQixHQUFyQixDQUFKLEVBQStCO0FBQzlCRCxzQkFBVSxHQUFJLEdBQUVKLFFBQVMsTUFBS1osTUFBTSxDQUFDYyxJQUFLLElBQUdYLEdBQUksRUFBakQ7QUFDQSxXQUZELE1BRU87QUFDTmEsc0JBQVUsR0FBSSxHQUFFSixRQUFTLE1BQUtaLE1BQU0sQ0FBQ2MsSUFBSyxJQUFHQyxJQUFLLElBQUdaLEdBQUksRUFBekQ7QUFDQTtBQUNEO0FBQ0Q7O0FBQ0QsVUFBSTtBQUNIRyxjQUFNLEdBQUcsSUFBSXZCLFNBQUosQ0FBY2lDLFVBQWQsQ0FBVDtBQUNBLE9BRkQsQ0FFRSxPQUFNRSxLQUFOLEVBQWE7QUFDZFYsZUFBTyxDQUFDQyxHQUFSLENBQVlTLEtBQVo7QUFDQTtBQUNBOztBQUVEWixZQUFNLENBQUNhLE1BQVAsR0FBZ0IsVUFBU0MsS0FBVCxFQUFnQjtBQUMvQixjQUFNQyxRQUFRLEdBQUdoQixLQUFLLENBQUNaLFlBQU4sQ0FBbUJjLEdBQW5CLENBQXVCSixHQUF2QixLQUErQixFQUFoRDtBQUNBa0IsZ0JBQVEsQ0FBQ0MsT0FBVCxDQUFpQkMsR0FBRyxJQUFJakIsTUFBTSxDQUFDa0IsSUFBUCxDQUFZQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsR0FBZixDQUFaLENBQXhCOztBQUVBbEIsYUFBSyxDQUFDZixPQUFOLENBQWNxQyxHQUFkLENBQWtCeEIsR0FBbEIsRUFBdUJHLE1BQXZCOztBQUNBRCxhQUFLLENBQUNaLFlBQU4sQ0FBbUJrQyxHQUFuQixDQUF1QnhCLEdBQXZCLEVBQTRCLEVBQTVCO0FBQ0EsT0FORDs7QUFRQUcsWUFBTSxDQUFDc0IsT0FBUCxHQUFpQixVQUFTUixLQUFULEVBQWdCO0FBQ2hDLGdCQUFPQSxLQUFLLENBQUNTLElBQWI7QUFDQyxlQUFLLElBQUw7QUFBVztBQUNWckIsbUJBQU8sQ0FBQ0MsR0FBUixDQUFZLG1CQUFaO0FBQ0E7O0FBQ0Q7QUFDQ0osaUJBQUssQ0FBQ3lCLE9BQU4sQ0FBY3hCLE1BQWQsRUFBc0JILEdBQXRCOztBQUNBRSxpQkFBSyxDQUFDMEIsU0FBTixDQUFnQnpCLE1BQWhCLEVBQXdCTixNQUF4Qjs7QUFDQTtBQVBGO0FBU0EsT0FWRDs7QUFZQU0sWUFBTSxDQUFDMEIsT0FBUCxHQUFpQixVQUFTQyxHQUFULEVBQWM7QUFDOUI1QixhQUFLLENBQUN5QixPQUFOLENBQWN4QixNQUFkLEVBQXNCSCxHQUF0Qjs7QUFDQUUsYUFBSyxDQUFDMEIsU0FBTixDQUFnQnpCLE1BQWhCLEVBQXdCTixNQUF4QjtBQUNBLE9BSEQ7O0FBS0FNLFlBQU0sQ0FBQzRCLFNBQVAsR0FBbUIsVUFBU0MsSUFBVCxFQUFlO0FBQ2pDLFlBQUk7QUFDSCxjQUFJakQsR0FBRyxDQUFDRixJQUFSLEVBQWM7QUFDYixnQkFBSW1ELElBQUksQ0FBQ0EsSUFBTCxZQUFxQm5ELElBQXpCLEVBQStCO0FBQzlCcUIsbUJBQUssQ0FBQytCLFFBQU4sQ0FBZUQsSUFBSSxDQUFDQSxJQUFwQjs7QUFDQTtBQUNBO0FBQ0Q7O0FBQ0QsY0FBSUUsUUFBUSxHQUFHWixJQUFJLENBQUNhLEtBQUwsQ0FBV0gsSUFBSSxDQUFDQSxJQUFoQixDQUFmOztBQUVBLGNBQUlFLFFBQVEsQ0FBQ0YsSUFBVCxDQUFjZixLQUFsQixFQUF5QjtBQUV4QixnQkFBSWxDLEdBQUcsQ0FBQ3FELFdBQVIsRUFBcUI7QUFDcEIsa0JBQUluQixLQUFLLEdBQUcsSUFBSWxDLEdBQUcsQ0FBQ3FELFdBQVIsQ0FBb0JGLFFBQVEsQ0FBQ0YsSUFBVCxDQUFjZixLQUFsQyxFQUF5QztBQUNwRG9CLHNCQUFNLEVBQUVILFFBQVEsQ0FBQ0Y7QUFEbUMsZUFBekMsQ0FBWjtBQUdBakQsaUJBQUcsQ0FBQ3VELFFBQUosQ0FBYUMsYUFBYixDQUEyQnRCLEtBQTNCO0FBQ0E7QUFDQSxhQU5ELE1BTU87QUFDTnVCLHFCQUFPLENBQUNDLElBQVIsQ0FBYVAsUUFBUSxDQUFDRixJQUFULENBQWNmLEtBQTNCLEVBQWtDaUIsUUFBUSxDQUFDRixJQUEzQztBQUNBO0FBQ0E7QUFFRDs7QUFDRCxjQUFJVSxNQUFNLEdBQUdSLFFBQVEsQ0FBQ1EsTUFBdEI7O0FBQ0EsZ0JBQU1yRCxTQUFTLEdBQUdhLEtBQUssQ0FBQ2IsU0FBTixDQUFnQmUsR0FBaEIsQ0FBb0I4QixRQUFRLENBQUNRLE1BQTdCLENBQWxCOztBQUNBLGNBQUksQ0FBQ3JELFNBQUwsRUFBZ0I7QUFDZjtBQUNBOztBQUNEQSxtQkFBUyxDQUFDOEIsT0FBVixDQUFrQndCLFFBQVEsSUFBSTtBQUM3QkEsb0JBQVEsQ0FBQ1QsUUFBUSxDQUFDRixJQUFWLEVBQWdCaEMsR0FBaEIsQ0FBUjtBQUNBLFdBRkQ7QUFHQSxTQS9CRCxDQStCRSxPQUFPNEMsQ0FBUCxFQUFVO0FBQ1h2QyxpQkFBTyxDQUFDQyxHQUFSLENBQVlzQyxDQUFaO0FBQ0E7QUFDRCxPQW5DRDtBQW9DQTtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0V2QixRQUFJLENBQUVxQixNQUFGLEVBQVVWLElBQVYsRUFBZ0JqQyxJQUFoQixFQUFzQjtBQUN6QixZQUFNOEMsR0FBRyxHQUFHO0FBQ1hILGNBQU0sRUFBRUEsTUFERztBQUVYVixZQUFJLEVBQUUsRUFBQyxHQUFHQSxJQUFKO0FBQVVjLGFBQUcsRUFBRXBFLFVBQVUsQ0FBQ3FFLFlBQVg7QUFBZjtBQUZLLE9BQVo7QUFJQSxZQUFNL0MsR0FBRyxHQUFHLEtBQUtnRCxZQUFMLENBQWtCakQsSUFBbEIsQ0FBWjtBQUNBLFlBQU1JLE1BQU0sR0FBRyxLQUFLOEMsU0FBTCxDQUFlbEQsSUFBZixDQUFmOztBQUVBLFVBQUlJLE1BQUosRUFBWTtBQUNYQSxjQUFNLENBQUNrQixJQUFQLENBQVlDLElBQUksQ0FBQ0MsU0FBTCxDQUFlc0IsR0FBZixDQUFaO0FBQ0EsT0FGRCxNQUVPO0FBQ04sWUFBSSxLQUFLdkQsWUFBTCxDQUFrQmMsR0FBbEIsQ0FBc0JKLEdBQXRCLENBQUosRUFBZ0M7QUFDL0IsZUFBS1YsWUFBTCxDQUFrQmMsR0FBbEIsQ0FBc0JKLEdBQXRCLEVBQTJCa0QsSUFBM0IsQ0FBZ0NMLEdBQWhDO0FBQ0EsU0FGRCxNQUVPO0FBQ04sZUFBS3ZELFlBQUwsQ0FBa0JrQyxHQUFsQixDQUFzQnhCLEdBQXRCLEVBQTJCLENBQUM2QyxHQUFELENBQTNCO0FBQ0E7QUFDRDtBQUNEOztBQUVETSxZQUFRLENBQUVDLElBQUYsRUFBUXJELElBQVIsRUFBYztBQUNyQixZQUFNSSxNQUFNLEdBQUcsS0FBSzhDLFNBQUwsQ0FBZWxELElBQWYsQ0FBZjs7QUFDQSxVQUFJSSxNQUFKLEVBQVk7QUFDWEEsY0FBTSxDQUFDa0IsSUFBUCxDQUFZK0IsSUFBWjtBQUNBO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFQyxVQUFNLENBQUNDLElBQUQsRUFBT0MsUUFBUCxFQUFpQjtBQUN0QixVQUFJLENBQUMsS0FBS2xFLFNBQUwsQ0FBZWUsR0FBZixDQUFtQmtELElBQW5CLENBQUwsRUFBK0I7QUFDOUIsYUFBS2pFLFNBQUwsQ0FBZW1DLEdBQWYsQ0FBbUI4QixJQUFuQixFQUF5QixDQUFDQyxRQUFELENBQXpCO0FBQ0EsT0FGRCxNQUVPO0FBQ04sYUFBS2xFLFNBQUwsQ0FBZWUsR0FBZixDQUFtQmtELElBQW5CLEVBQXlCSixJQUF6QixDQUE4QkssUUFBOUI7QUFDQTtBQUNEOztBQUVEM0IsYUFBUyxDQUFDekIsTUFBRCxFQUFTTixNQUFULEVBQWlCO0FBQ3pCLFVBQUlLLEtBQUssR0FBRyxJQUFaOztBQUNBc0QsZ0JBQVUsQ0FBQyxZQUFXO0FBQ3JCdEQsYUFBSyxDQUFDTixNQUFOLENBQWFDLE1BQWI7QUFDQSxPQUZTLEVBRVAsSUFGTyxDQUFWO0FBR0E7O0FBRUQ4QixXQUFPLENBQUN4QixNQUFELEVBQVNILEdBQVQsRUFBYztBQUNwQixVQUFJRyxNQUFKLEVBQVk7QUFDWEEsY0FBTSxDQUFDMEIsT0FBUCxHQUFpQjFCLE1BQU0sQ0FBQ2EsTUFBUCxHQUFnQmIsTUFBTSxDQUFDc0IsT0FBUCxHQUFpQixJQUFsRDtBQUNBdEIsY0FBTSxDQUFDc0QsS0FBUDtBQUNBdEQsY0FBTSxHQUFHLElBQVQ7QUFDQTs7QUFFRCxVQUFJLEtBQUtoQixPQUFMLENBQWFpQixHQUFiLENBQWlCSixHQUFqQixDQUFKLEVBQTJCO0FBQzFCLGFBQUtiLE9BQUwsQ0FBYXVFLE1BQWIsQ0FBb0IxRCxHQUFwQjtBQUNBO0FBQ0Q7O0FBRUQyRCxnQkFBWSxDQUFDM0QsR0FBRCxFQUFNO0FBQ2pCLFVBQUlHLE1BQU0sR0FBRyxLQUFLaEIsT0FBTCxDQUFhaUIsR0FBYixDQUFpQkosR0FBakIsQ0FBYjs7QUFDQSxVQUFJRyxNQUFKLEVBQVk7QUFDWCxhQUFLd0IsT0FBTCxDQUFheEIsTUFBYixFQUFxQkgsR0FBckI7QUFDQTtBQUNEOztBQUVEQyxVQUFNLENBQUNILFNBQUQsRUFBWUMsSUFBWixFQUFrQjtBQUN2QixVQUFJQyxHQUFHLEdBQUksR0FBRSxLQUFLZCxNQUFPLEVBQXpCOztBQUNBLFVBQUlZLFNBQVMsSUFBSUEsU0FBUyxJQUFJLEVBQTlCLEVBQWtDO0FBQ2pDLFlBQUlDLElBQUksSUFBS0EsSUFBSSxJQUFJLEVBQXJCLEVBQXlCO0FBQ3hCQyxhQUFHLElBQUssSUFBR0YsU0FBVSxJQUFHQyxJQUFLLEVBQTdCO0FBQ0EsU0FGRCxNQUVPO0FBQ05DLGFBQUcsSUFBSSxJQUFHRixTQUFVLEVBQXBCO0FBQ0E7QUFDRDs7QUFDRCxhQUFPRSxHQUFQO0FBQ0E7O0FBRURpRCxhQUFTLENBQUNsRCxJQUFELEVBQU87QUFDZixVQUFJQyxHQUFHLEdBQUcsS0FBS2dELFlBQUwsQ0FBa0JqRCxJQUFsQixDQUFWO0FBQ0EsYUFBTyxLQUFLWixPQUFMLENBQWFpQixHQUFiLENBQWlCSixHQUFqQixDQUFQO0FBQ0E7O0FBRURnRCxnQkFBWSxDQUFDakQsSUFBRCxFQUFPO0FBQ2xCLFVBQUlDLEdBQUcsR0FBRyxLQUFLUixXQUFmOztBQUNBLFVBQUlPLElBQUosRUFBVTtBQUNUQyxXQUFHLEdBQUksR0FBRSxLQUFLZCxNQUFPLElBQUdhLElBQUssRUFBN0I7QUFDQTs7QUFDRCxhQUFPQyxHQUFQO0FBQ0E7O0FBR0RpQyxZQUFRLENBQUMyQixJQUFELEVBQU87QUFDZCxVQUFJN0UsR0FBRyxDQUFDdUQsUUFBUixFQUFrQjtBQUNqQixjQUFNdUIsU0FBUyxHQUFHLEtBQUt0RSxZQUFMLElBQXFCLGNBQXZDO0FBQ0EsWUFBSXVFLENBQUMsR0FBRy9FLEdBQUcsQ0FBQ3VELFFBQUosQ0FBYXlCLGFBQWIsQ0FBMkIsR0FBM0IsQ0FBUjtBQUNNaEYsV0FBRyxDQUFDdUQsUUFBSixDQUFhMEIsSUFBYixDQUFrQkMsV0FBbEIsQ0FBOEJILENBQTlCO0FBQ0FBLFNBQUMsQ0FBQ0ksS0FBRixHQUFVLGVBQVY7QUFFQSxZQUFJQyxHQUFHLEdBQUd4RixNQUFNLENBQUN5RixHQUFQLENBQVdDLGVBQVgsQ0FBMkJULElBQTNCLENBQVY7QUFDQUUsU0FBQyxDQUFDUSxJQUFGLEdBQVNILEdBQVQ7QUFDQUwsU0FBQyxDQUFDUyxRQUFGLEdBQWFWLFNBQWI7QUFDQUMsU0FBQyxDQUFDVSxLQUFGO0FBQ0F6RixXQUFHLENBQUNxRixHQUFKLENBQVFLLGVBQVIsQ0FBd0JOLEdBQXhCO0FBRUEsYUFBSzVFLFlBQUwsR0FBb0IsRUFBcEI7QUFDTjtBQUNEOztBQUVEbUYsZUFBVyxDQUFDQyxTQUFELEVBQVk7QUFDdEIsYUFBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3ZDLFlBQUkvRixHQUFHLENBQUN1RCxRQUFSLEVBQWtCO0FBQUU7QUFDbkJ2RCxhQUFHLENBQUN1RCxRQUFKLENBQWF5QyxnQkFBYixDQUE4QkosU0FBOUIsRUFBeUMsVUFBUzFELEtBQVQsRUFBZ0I7QUFDckQ0RCxtQkFBTyxDQUFDNUQsS0FBSyxDQUFDb0IsTUFBUCxDQUFQO0FBQ0gsV0FGRCxFQUVHO0FBQUUyQyxnQkFBSSxFQUFFO0FBQVIsV0FGSDtBQUdBLFNBSkQsTUFJTztBQUFFO0FBQ1J4QyxpQkFBTyxDQUFDd0MsSUFBUixDQUFhTCxTQUFiLEVBQXlCM0MsSUFBRCxJQUFVO0FBQ2pDNkMsbUJBQU8sQ0FBQzdDLElBQUQsQ0FBUDtBQUNBLFdBRkQ7QUFHQTtBQUNELE9BVk0sQ0FBUDtBQVdBOztBQTVQRjs7QUE4UEcsU0FBT2hELG9CQUFQO0FBQ0gsQ0FyUkEsQ0FBRCIsImZpbGUiOiIuLi9Db0NyZWF0ZS1zb2NrZXQtY2xpZW50L3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFsnLi9jb21tb24tZnVuLmpzJ10sIGZ1bmN0aW9uKGNvbW1vbkZ1bmMpIHtcbiAgICAgICAgXHRyZXR1cm4gZmFjdG9yeShjb21tb25GdW5jLCB3aW5kb3csIFdlYlNvY2tldCwgQmxvYilcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBsZXQgd25kT2JqID0ge1xuICAgICAgICBcdGxvY2F0aW9uOiB7XG4gICAgICAgIFx0XHRwcm90b2NvbDogXCJcIlxuICAgICAgICBcdH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3cyA9IHJlcXVpcmUoXCJ3c1wiKVxuICAgICAgICBjb25zdCBjb21tb25GdW5jID0gcmVxdWlyZShcIi4vY29tbW9uLWZ1bi5qc1wiKVxuICAgIFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KGNvbW1vbkZ1bmMsIHduZE9iaiwgd3MsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgICAgIHJvb3QucmV0dXJuRXhwb3J0cyA9IGZhY3Rvcnkocm9vdFtcIi4vY29tbW9uLWZ1bi5qc1wiXSwgd2luZG93LCBXZWJTb2NrZXQsIEJsb2IpO1xuICB9XG59KHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbiAoY29tbW9uRnVuYywgd25kLCBXZWJTb2NrZXQsIEJsb2IpIHtcblxuICAgIGNsYXNzIENvQ3JlYXRlU29ja2V0Q2xpZW50XG5cdHtcblx0XHRjb25zdHJ1Y3RvcihwcmVmaXggPSBcImNydWRcIikge1xuXHRcdFx0dGhpcy5wcmVmaXggPSBwcmVmaXggfHwgXCJjcnVkXCI7XG5cdFx0XHR0aGlzLnNvY2tldHMgPSBuZXcgTWFwKCk7XG5cdFx0XHR0aGlzLmxpc3RlbmVycyA9IG5ldyBNYXAoKTtcblx0XHRcdHRoaXMubWVzc2FnZVF1ZXVlID0gIG5ldyBNYXAoKTtcblx0XHRcdHRoaXMuc2F2ZUZpbGVOYW1lID0gICcnO1xuXHRcdFx0dGhpcy5nbG9iYWxTY29wZSA9ICBcIlwiO1xuXHRcdH1cblx0XG5cdFx0c2V0R2xvYmFsU2NvcGUoc2NvcGUpIHtcblx0XHRcdHRoaXMuZ2xvYmFsU2NvcGUgPSBgJHt0aGlzLnByZWZpeH0vJHtzY29wZX1gO1xuXHRcdH1cblx0XHRcblx0XHRnZXRHbG9iYWxTY29wZSgpIHtcblx0XHRcdHJldHVybiB0aGlzLmdsb2JhbFNjb3BlO1xuXHRcdH1cblx0XHRcblx0XHQvKipcblx0XHQgKiBjb25maWc6IHtuYW1lc3BhY2UsIHJvb20sIGhvc3R9XG5cdFx0ICovXG5cdFx0Y3JlYXRlIChjb25maWcpIHtcblx0XHRcdFxuXHRcdFx0Y29uc3Qge25hbWVzcGFjZSwgcm9vbX0gPSBjb25maWc7XG5cdFx0XHRjb25zdCBrZXkgPSB0aGlzLmdldEtleShuYW1lc3BhY2UsIHJvb20pO1xuXHRcdFx0bGV0IF90aGlzID0gdGhpcztcblx0XHRcdGlmIChuYW1lc3BhY2UpIHtcblx0XHRcdFx0dGhpcy5zZXRHbG9iYWxTY29wZShuYW1lc3BhY2UpXG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGxldCBzb2NrZXQ7XG5cdFx0XHRpZiAodGhpcy5zb2NrZXRzLmdldChrZXkpKSB7XG5cdFx0XHRcdHNvY2tldCA9IHRoaXMuc29ja2V0cy5nZXQoa2V5KTtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1NPY2tldCBhbHJlYWR5IGhhcyBiZWVuIHJlZ2lzdGVyJyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bGV0IHdfcHJvdG9jb2wgPSB3bmQubG9jYXRpb24ucHJvdG9jb2w7XHRcdFxuXHRcdFx0aWYgKHduZC5sb2NhdGlvbi5wcm90b2NvbCA9PT0gXCJhYm91dDpcIikge1xuXHRcdFx0XHR3X3Byb3RvY29sID0gd25kLnBhcmVudC5sb2NhdGlvbi5wcm90b2NvbDtcblx0XHRcdFx0aWYgKCFjb25maWcuaG9zdCkge1xuXHRcdFx0XHRcdGNvbmZpZy5ob3N0ID0gd25kLnBhcmVudC5sb2NhdGlvbi5ob3N0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRsZXQgcHJvdG9jb2wgPSB3X3Byb3RvY29sID09PSAnaHR0cDonID8gJ3dzJyA6ICd3c3MnO1xuXHRcdFx0XG5cdFx0XHRjb25zdCBwb3J0ID0gY29uZmlnLnBvcnQgPyBjb25maWcucG9ydCA6IDgwODg7XG5cdFx0XHRcblx0XHRcdGxldCBzb2NrZXRfdXJsID0gYCR7cHJvdG9jb2x9Oi8vJHt3bmQubG9jYXRpb24uaG9zdH06JHtwb3J0fS8ke2tleX1gO1xuXHRcdFx0XG5cdFx0XHRpZiAoY29uZmlnLmhvc3QpIHtcblx0XHRcdFx0aWYgKGNvbmZpZy5ob3N0LmluY2x1ZGVzKFwiOi8vXCIpKSB7XG5cdFx0XHRcdFx0c29ja2V0X3VybCA9IGAke2NvbmZpZy5ob3N0fS8ke2tleX1gO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmIChjb25maWcuaG9zdC5pbmNsdWRlcyhcIjpcIikpIHtcblx0XHRcdFx0XHRcdHNvY2tldF91cmwgPSBgJHtwcm90b2NvbH06Ly8ke2NvbmZpZy5ob3N0fS8ke2tleX1gO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzb2NrZXRfdXJsID0gYCR7cHJvdG9jb2x9Oi8vJHtjb25maWcuaG9zdH06JHtwb3J0fS8ke2tleX1gO1x0XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzb2NrZXQgPSBuZXcgV2ViU29ja2V0KHNvY2tldF91cmwpO1xuXHRcdFx0fSBjYXRjaChlcnJvcikge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcilcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRzb2NrZXQub25vcGVuID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFx0Y29uc3QgbWVzc2FnZXMgPSBfdGhpcy5tZXNzYWdlUXVldWUuZ2V0KGtleSkgfHwgW107XG5cdFx0XHRcdG1lc3NhZ2VzLmZvckVhY2gobXNnID0+IHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KG1zZykpKTtcblx0XHRcdFx0XG5cdFx0XHRcdF90aGlzLnNvY2tldHMuc2V0KGtleSwgc29ja2V0KTtcblx0XHRcdFx0X3RoaXMubWVzc2FnZVF1ZXVlLnNldChrZXksIFtdKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0c29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0XHRzd2l0Y2goZXZlbnQuY29kZSkge1xuXHRcdFx0XHRcdGNhc2UgMTAwMDogLy8gY2xvc2Ugbm9ybWFsXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIndlYnNvY2tldDogY2xvc2VkXCIpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogXG5cdFx0XHRcdFx0XHRfdGhpcy5kZXN0cm95KHNvY2tldCwga2V5KTtcblx0XHRcdFx0XHRcdF90aGlzLnJlY29ubmVjdChzb2NrZXQsIGNvbmZpZyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRzb2NrZXQub25lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuXHRcdFx0XHRfdGhpcy5kZXN0cm95KHNvY2tldCwga2V5KTtcblx0XHRcdFx0X3RoaXMucmVjb25uZWN0KHNvY2tldCwgY29uZmlnKTtcblx0XHRcdH1cblx0XG5cdFx0XHRzb2NrZXQub25tZXNzYWdlID0gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGlmICh3bmQuQmxvYikge1xuXHRcdFx0XHRcdFx0aWYgKGRhdGEuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcblx0XHRcdFx0XHRcdFx0X3RoaXMuc2F2ZUZpbGUoZGF0YS5kYXRhKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsZXQgcmV2X2RhdGEgPSBKU09OLnBhcnNlKGRhdGEuZGF0YSk7XG5cblx0XHRcdFx0XHRpZiAocmV2X2RhdGEuZGF0YS5ldmVudCkge1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZiAod25kLkN1c3RvbUV2ZW50KSB7XG5cdFx0XHRcdFx0XHRcdHZhciBldmVudCA9IG5ldyB3bmQuQ3VzdG9tRXZlbnQocmV2X2RhdGEuZGF0YS5ldmVudCwge1xuXHRcdFx0XHRcdFx0XHRcdGRldGFpbDogcmV2X2RhdGEuZGF0YVxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHR3bmQuZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHByb2Nlc3MuZW1pdChyZXZfZGF0YS5kYXRhLmV2ZW50LCByZXZfZGF0YS5kYXRhKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGV0IGFjdGlvbiA9IHJldl9kYXRhLmFjdGlvbjtcblx0XHRcdFx0XHRjb25zdCBsaXN0ZW5lcnMgPSBfdGhpcy5saXN0ZW5lcnMuZ2V0KHJldl9kYXRhLmFjdGlvbik7XG5cdFx0XHRcdFx0aWYgKCFsaXN0ZW5lcnMpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuXHRcdFx0XHRcdFx0bGlzdGVuZXIocmV2X2RhdGEuZGF0YSwga2V5KTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogXG5cdFx0ICovXG5cdFx0c2VuZCAoYWN0aW9uLCBkYXRhLCByb29tKSB7XG5cdFx0XHRjb25zdCBvYmogPSB7XG5cdFx0XHRcdGFjdGlvbjogYWN0aW9uLFxuXHRcdFx0XHRkYXRhOiB7Li4uZGF0YSwgdWlkOiBjb21tb25GdW5jLkdlbmVyYXRlVVVJRCgpfVxuXHRcdFx0fVxuXHRcdFx0Y29uc3Qga2V5ID0gdGhpcy5nZXRLZXlCeVJvb20ocm9vbSk7XG5cdFx0XHRjb25zdCBzb2NrZXQgPSB0aGlzLmdldEJ5Um9vbShyb29tKTtcblxuXHRcdFx0aWYgKHNvY2tldCkge1xuXHRcdFx0XHRzb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeShvYmopKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0aGlzLm1lc3NhZ2VRdWV1ZS5nZXQoa2V5KSkge1xuXHRcdFx0XHRcdHRoaXMubWVzc2FnZVF1ZXVlLmdldChrZXkpLnB1c2gob2JqKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLm1lc3NhZ2VRdWV1ZS5zZXQoa2V5LCBbb2JqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0c2VuZEZpbGUgKGZpbGUsIHJvb20pIHtcblx0XHRcdGNvbnN0IHNvY2tldCA9IHRoaXMuZ2V0QnlSb29tKHJvb20pO1xuXHRcdFx0aWYgKHNvY2tldCkge1xuXHRcdFx0XHRzb2NrZXQuc2VuZChmaWxlKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdC8qKlxuXHRcdCAqIHNjb3BlOiBucy9yb29tXG5cdFx0ICovXG5cdFx0bGlzdGVuKHR5cGUsIGNhbGxiYWNrKSB7XG5cdFx0XHRpZiAoIXRoaXMubGlzdGVuZXJzLmdldCh0eXBlKSkge1xuXHRcdFx0XHR0aGlzLmxpc3RlbmVycy5zZXQodHlwZSwgW2NhbGxiYWNrXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmxpc3RlbmVycy5nZXQodHlwZSkucHVzaChjYWxsYmFjayk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJlY29ubmVjdChzb2NrZXQsIGNvbmZpZykge1xuXHRcdFx0bGV0IF90aGlzID0gdGhpcztcblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF90aGlzLmNyZWF0ZShjb25maWcpO1xuXHRcdFx0fSwgMTAwMClcblx0XHR9XG5cdFx0XG5cdFx0ZGVzdHJveShzb2NrZXQsIGtleSkge1xuXHRcdFx0aWYgKHNvY2tldCkge1xuXHRcdFx0XHRzb2NrZXQub25lcnJvciA9IHNvY2tldC5vbm9wZW4gPSBzb2NrZXQub25jbG9zZSA9IG51bGw7XG5cdFx0XHRcdHNvY2tldC5jbG9zZSgpO1xuXHRcdFx0XHRzb2NrZXQgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZiAodGhpcy5zb2NrZXRzLmdldChrZXkpKSB7XG5cdFx0XHRcdHRoaXMuc29ja2V0cy5kZWxldGUoa2V5KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0ZGVzdHJveUJ5S2V5KGtleSkge1xuXHRcdFx0bGV0IHNvY2tldCA9IHRoaXMuc29ja2V0cy5nZXQoa2V5KSBcblx0XHRcdGlmIChzb2NrZXQpIHtcblx0XHRcdFx0dGhpcy5kZXN0cm95KHNvY2tldCwga2V5KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Z2V0S2V5KG5hbWVzcGFjZSwgcm9vbSkge1xuXHRcdFx0bGV0IGtleSA9IGAke3RoaXMucHJlZml4fWA7XG5cdFx0XHRpZiAobmFtZXNwYWNlICYmIG5hbWVzcGFjZSAhPSAnJykge1xuXHRcdFx0XHRpZiAocm9vbSAmJiAgcm9vbSAhPSAnJykge1xuXHRcdFx0XHRcdGtleSArPSBgLyR7bmFtZXNwYWNlfS8ke3Jvb219YDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRrZXkgKz1gLyR7bmFtZXNwYWNlfWA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBrZXk7XG5cdFx0fVxuXHRcdFxuXHRcdGdldEJ5Um9vbShyb29tKSB7XG5cdFx0XHRsZXQga2V5ID0gdGhpcy5nZXRLZXlCeVJvb20ocm9vbSlcblx0XHRcdHJldHVybiB0aGlzLnNvY2tldHMuZ2V0KGtleSk7XHRcblx0XHR9XG5cdFx0XG5cdFx0Z2V0S2V5QnlSb29tKHJvb20pIHtcblx0XHRcdGxldCBrZXkgPSB0aGlzLmdsb2JhbFNjb3BlO1xuXHRcdFx0aWYgKHJvb20pIHtcblx0XHRcdFx0a2V5ID0gYCR7dGhpcy5wcmVmaXh9LyR7cm9vbX1gO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGtleTtcdFx0XG5cdFx0fVxuXHRcdFxuXHRcdFxuXHRcdHNhdmVGaWxlKGJsb2IpIHtcblx0XHRcdGlmICh3bmQuZG9jdW1lbnQpIHtcblx0XHRcdFx0Y29uc3QgZmlsZV9uYW1lID0gdGhpcy5zYXZlRmlsZU5hbWUgfHwgJ2Rvd25sb2FkRmlsZSc7XG5cdFx0XHRcdHZhciBhID0gd25kLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHRcdCAgICAgICAgd25kLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG5cdFx0ICAgICAgICBhLnN0eWxlID0gXCJkaXNwbGF5OiBub25lXCI7XG5cdFx0XG5cdFx0ICAgICAgICBsZXQgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdFx0ICAgICAgICBhLmhyZWYgPSB1cmw7XG5cdFx0ICAgICAgICBhLmRvd25sb2FkID0gZmlsZV9uYW1lO1xuXHRcdCAgICAgICAgYS5jbGljaygpO1xuXHRcdCAgICAgICAgd25kLlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcblx0XHRcblx0XHQgICAgICAgIHRoaXMuc2F2ZUZpbGVOYW1lID0gJydcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0bGlzdGVuQXN5bmMoZXZlbnRuYW1lKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0XHRpZiAod25kLmRvY3VtZW50KSB7IC8vLiBicm93c2VyIGNhc2Vcblx0XHRcdFx0XHR3bmQuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudG5hbWUsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdFx0ICAgIHJlc29sdmUoZXZlbnQuZGV0YWlsKTtcblx0XHRcdFx0XHR9LCB7IG9uY2U6IHRydWUgfSlcblx0XHRcdFx0fSBlbHNlIHsgLy8uIG5vZGUgY2FzZVxuXHRcdFx0XHRcdHByb2Nlc3Mub25jZShldmVudG5hbWUsIChkYXRhKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKGRhdGEpXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHR9XG5cdH1cbiAgICByZXR1cm4gQ29DcmVhdGVTb2NrZXRDbGllbnRcbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-socket-client/src/index.js\n")},"../CoCreate-utils/src/index.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.generateUUID = generateUUID;\nexports.getParentFromElement = getParentFromElement;\nexports.isJsonString = isJsonString;\nexports.getAttributes = getAttributes;\nexports.checkValue = checkValue;\nexports.allFrame = allFrame;\nexports.cssPath = cssPath;\nexports.getTopMostWindow = getTopMostWindow;\nexports.findIframeFromElement = findIframeFromElement;\nexports.getIframeFromPath = getIframeFromPath;\nexports.configMatch = configMatch;\nexports.configExecuter = configExecuter;\nexports.UUID = UUID;\nexports.parseTextToHtml = parseTextToHtml;\nexports.splitBydelimiter = splitBydelimiter;\nexports.joinBydelimiter = joinBydelimiter;\nexports.isValidSelector = isValidSelector;\nexports.getElementPath = getElementPath;\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nfunction generateUUID(length = 36) {\n  // if (length == 10) {\n  //   var result           = \'\';\n  //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n  //   var charactersLength = characters.length;\n  //   for ( var i = 0; i < length; i++ ) {\n  //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  //   }\n  //   var dd = new Date().toTimeString();\n  //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n  //   result += random;\n  //   return result;\n  // }\n  let d = new Date().getTime();\n  let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n  let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n  if (length <= pattern.length) {\n    pattern = pattern.substr(0, length);\n  } else {\n    let add_len = length - pattern.length;\n    let sub_pattern = "-xxxyyxxx";\n    let group_n = Math.floor(add_len / sub_pattern.length);\n\n    for (let i = 0; i < group_n; i++) {\n      pattern += sub_pattern;\n    }\n\n    group_n = add_len - group_n * sub_pattern.length;\n    pattern += sub_pattern.substr(0, group_n);\n  }\n\n  let uuid = pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16;\n\n    if (d > 0) {\n      var r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      var r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n\n    return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction getParentFromElement(element, parent_class, attributes) {\n  if (parent_class) {\n    if (element.classList.contains(parent_class)) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.classList) {\n      if (node.classList.contains(parent_class)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  } else if (attributes) {\n    if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.attributes) {\n      if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return false;\n}\n\nfunction isJsonString(str_data) {\n  try {\n    let json_data = JSON.parse(str_data);\n\n    if (typeof json_data === "object" && json_data != null) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getAttributes(element) {\n  return element.getAttributeNames().reduce((attrMap, name) => {\n    attrMap[name] = element.getAttribute(name);\n    return attrMap;\n  }, {});\n}\n\nfunction checkValue(value) {\n  if (!value) return false;\n\n  if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n    return false;\n  }\n\n  return true;\n} // hosseins utills\n// function to go through all frames\n\n\nfunction allFrame(callback) {\n  let allFrames = [{\n    document,\n    window\n  }];\n\n  for (let frame of document.querySelectorAll("iframe")) {\n    let frameDocument = frame.contentDocument || frame.contentWindow.document;\n    let frameWindow = frame.contentWindow;\n    allFrames.push({\n      document: frameDocument,\n      window: frameWindow,\n      frameElement: frame\n    });\n  }\n\n  let result = new Set();\n\n  for (let frame of allFrames) {\n    let callbackResult = callback(frame);\n    if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n  }\n\n  return Array.from(result);\n}\n\nfunction cssPath(node) {\n  let pathSplits = [];\n\n  do {\n    if (!node || !node.tagName) return false;\n    let pathSplit = node.tagName.toLowerCase();\n    if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n    if (node.classList.length && node.tagName !== "BODY") {\n      node.classList.forEach(item => {\n        if (item.indexOf(":") === -1) pathSplit += "." + item;\n      });\n    }\n\n    if (node.tagName !== "BODY" && node.parentNode) {\n      let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n      pathSplit += `:nth-child(${index + 1})`;\n    }\n\n    pathSplits.unshift(pathSplit);\n    node = node.parentNode;\n  } while (node.tagName !== "HTML");\n\n  return pathSplits.join(" > ");\n}\n\nfunction getTopMostWindow() {\n  let parentWindow = window;\n\n  while (parentWindow !== window.parent) parentWindow = window.parent;\n\n  return parentWindow;\n}\n\nfunction findIframeFromElement(windowObject, element) {\n  let frameElement;\n  allFrame(frame => {\n    if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n  });\n  return frameElement;\n}\n\nfunction getIframeFromPath(path) {\n  let topWindow = getTopMostWindow;\n  path.forEach(selector => {\n    if (topWindow) topWindow = topWindow.querySelector(selector);\n  });\n  return topWindow;\n} // DO NOT REMOVE\n\n\nfunction* configMatch(elementConfig, element) {\n  for (let config of elementConfig) {\n    // if (!Array.isArray(config.selector))\n    //   config.selector = [config.selector];\n    if (config.selector && element.matches(config.selector)) yield config;\n  }\n\n  return;\n} // export function configMatch2(elementConfig, element) {\n//   let result = [];\n//   for (let config of elementConfig) {\n//     if (config.selector && element.matches(config.selector)) result.push(config);\n//   }\n//   return result;\n// }\n// DO NOT REMOVE\n// an opiniated function uses configMatch2 to read configs\n// WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n// typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n// element: the element to read attributes\n// key: the key in which is in elementConfig and on match onSuccess callback will be called\n\n\nfunction configExecuter(element, key, onSuccess, elementConfig) {\n  for (let config of configMatch(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n  return false;\n}\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nfunction parseTextToHtml(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction splitBydelimiter(str, delimiter) {\n  return str.split(delimiter).map(s => s.trim());\n}\n\nfunction joinBydelimiter(str, delimiter) {\n  return str.map(s => s.trim()).join(delimiter);\n}\n\nfunction isValidSelector(selector) {\n  try {\n    document.createDocumentFragment().querySelector(selector);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getElementPath(element, returnContext) {\n  let path = [];\n  let topWindow = window;\n  let iframeElement = findIframeFromElement(topWindow, element);\n  let p = cssPath(iframeElement);\n  if (p) path.unshift(p);\n  return returnContext ? {\n    path,\n    document: iframeElement || document\n  } : path; //todo: support for nested iframe\n  // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n  // {\n  //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n  //   path.unshift(cssPath(iframeElement))\n  // }\n}\n\nvar _default = {\n  getElementPath,\n  isValidSelector,\n  joinBydelimiter,\n  splitBydelimiter,\n  parseTextToHtml,\n  UUID,\n  configExecuter,\n  configMatch,\n  getIframeFromPath,\n  findIframeFromElement,\n  getTopMostWindow,\n  cssPath,\n  allFrame,\n  checkValue,\n  getAttributes,\n  isJsonString,\n  getParentFromElement,\n  generateUUID\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-utils/src/index.js\n')},"../../CoCreateJS/node_modules/file-loader/dist/cjs.js!./src/CoCreate-select.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "eaddb3aea56752094a14d18001b9856d.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZWxlY3QvLi9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcz9lMjJmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxxQkFBdUIseUNBQXlDIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlSlMvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3JjL0NvQ3JlYXRlLXNlbGVjdC5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZWFkZGIzYWVhNTY3NTIwOTRhMTRkMTgwMDFiOTg1NmQuY3NzXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/node_modules/file-loader/dist/cjs.js!./src/CoCreate-select.css\n')},"./src/CoCreate-select.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CoCreateJS_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../CoCreateJS/node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "../../CoCreateJS/node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _CoCreateJS_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CoCreateJS_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CoCreateJS_node_modules_file_loader_dist_cjs_js_CoCreate_select_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../CoCreateJS/node_modules/file-loader/dist/cjs.js!./CoCreate-select.css */ "../../CoCreateJS/node_modules/file-loader/dist/cjs.js!./src/CoCreate-select.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _CoCreateJS_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_CoCreateJS_node_modules_file_loader_dist_cjs_js_CoCreate_select_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZWxlY3QvLi9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcz9kOGIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUc7QUFDekcsWUFBbUg7O0FBRW5ILGVBQWU7O0FBRWY7O0FBRUEsYUFBYSxvSEFBRyxDQUFDLHlHQUFPOzs7O0FBSXhCLGlFQUFlLEUiLCJmaWxlIjoiLi9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9Db0NyZWF0ZUpTL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9MaW5rVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9Db0NyZWF0ZUpTL25vZGVfbW9kdWxlcy9maWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvQ3JlYXRlLXNlbGVjdC5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7XCJpbmplY3RUeXBlXCI6XCJsaW5rVGFnXCJ9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQge30iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/CoCreate-select.css\n')},"../../CoCreateJS/node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nmodule.exports = function (url, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {};\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  var link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.href = url;\n  Object.keys(options.attributes).forEach(function (key) {\n    link.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(link);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(link);\n  }\n\n  return function (newUrl) {\n    if (typeof newUrl === 'string') {\n      link.href = newUrl;\n    } else {\n      link.parentNode.removeChild(link);\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zZWxlY3QvLi4vLi4vQ29DcmVhdGVKUy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvTGlua1RhZy5qcz8yZmFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLEtBQXdDLEdBQUcsc0JBQWlCLEdBQUcsQ0FBSTs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGVKUy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvTGlua1RhZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5hdHRyaWJ1dGVzID0gdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgPyBvcHRpb25zLmF0dHJpYnV0ZXMgOiB7fTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XG4gIGxpbmsuaHJlZiA9IHVybDtcbiAgT2JqZWN0LmtleXMob3B0aW9ucy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBsaW5rLnNldEF0dHJpYnV0ZShrZXksIG9wdGlvbnMuYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KGxpbmspO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAobmV3VXJsKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsaW5rLmhyZWYgPSBuZXdVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmsucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rKTtcbiAgICB9XG4gIH07XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var F=__webpack_require__.g.document;if(!Q&&F&&(F.currentScript&&(Q=F.currentScript.src),!Q)){var U=F.getElementsByTagName("script");U.length&&(Q=U[U.length-1].src)}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})();var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));